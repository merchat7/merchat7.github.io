{"version":3,"sources":["utils/beautiful-dnd.tsx","components/todo-tasks/todo-tasks.tsx","redux/ducks/todo-tasks/todo-tasks-duck.tsx","redux/ducks/todo-tasks/index.tsx","redux/ducks/todo-lists/todo-lists-duck.tsx","redux/ducks/todo-lists/index.tsx","components/todo-tasks/todo-tasks-container.tsx","components/todo-tasks/details/todo-tasks-details.tsx","components/todo-lists/todo-lists.tsx","components/todo-lists/todo-lists-container.tsx","routes/todo-tasks-page/todo-tasks-page.tsx","components/app/header/app-header.tsx","utils/misc.tsx","redux/ducks/todo-schedules/todo-schedules-duck.tsx","redux/ducks/todo-schedules/index.tsx","components/todo-schedule/sidebar/todo-schedule-sidebar.tsx","utils/date.tsx","components/todo-schedule/sidebar/todo-schedule-sidebar-container.tsx","components/todo-schedule/todo-schedule.tsx","components/todo-schedule/todo-schedule-container.tsx","routes/todo-schedule-page/todo-schedule-page.tsx","routes/todo-schedule-page/todo-schedule-page-container.tsx","components/app/app.tsx","serviceWorker.ts","api/config-autogen.ts","utils/api.tsx","redux/ducks/todo-lists/todo-lists-sagas.tsx","redux/ducks/todo-tasks/todo-tasks-sagas.tsx","redux/ducks/todo-schedules/todo-schedules-sagas.tsx","redux/ducks/index.tsx","redux/store.tsx","index.tsx"],"names":["reorder","list","startIndex","endIndex","result","Object","toConsumableArray","_result$splice","splice","removed","slicedToArray","onItemDragEndReorderList","lists","reorderList","source","destination","index","droppableId","TodoTasks","props","renameTodoListInputRef","_useState","useState","_useState2","openTodoListMenu","setOpenTodoListMenu","_useState3","_useState4","editableListName","setEditableListName","_useState5","_useState6","newTodoListName","setNewTodoListName","_useState7","_useState8","addTaskInputFocused","setAddTaskInputFocused","todoListMenuRef","useRef","todoListMenuButtonRef","selectedTodoList","todoTasks","handleMenuClick","renameTodoListInputSubmit","addTodoTaskFormSubmit","deleteTodoTask","renameTodoTaskInputSubmit","reorderTodoTask","processHandleMenuClick","info","processRenameTodoListInputSubmit","todoListId","handleClickOutside","event","current","contains","target","useEffect","focus","document","addEventListener","removeEventListener","react_default","a","createElement","className","Fragment","AutosizeInput_default","name","inputClassName","value","placeholder","inputRef","node","onChange","onKeyDown","key","onFocus","select","onBlur","onClick","style","color","ref","index_es","icon","rc_menu_es","disabled","react_beautiful_dnd_esm","onDragEnd","provided","snapshot","assign","innerRef","droppableProps","isDraggingOver","map","todoTask","todoTaskId","draggableId","providedDraggable","snapshotDraggable","isDragging","draggableProps","dragHandleProps","newTodoTaskName","prompt","renameTodoTaskPrompt","stopPropagation","formik_esm","initialValues","todoTaskName","onSubmit","_ref","isSubmitting","submitForm","concat","type","autoComplete","constants","actions","addTodoTask","createStandardAction","deleteTodoTaskBegin","deleteTodoTaskById","deleteTodoTaskInTodoList","deleteTodoTasks","renameTodoTask","setTodoTasksById","setTodoTasksInTodoList","selectors","todoTaskSelector","state","entities","byId","todoTasksSelector","todoList","todoLists","todoTasksNotInScheduleSelector","dateKey","todoTaskIdsInSchedule","Set","todoSchedules","byDate","values","forEach","todoScheduleGroup","add","filter","has","todoTasksReducer","createReducer","handleAction","action","produce","draftState","payload","_action$payload","todoTaskIdToDelete","newTodoTaskIds","orderKey","_action$payload2","objectSpread","merge","reducer","combineReducers","addTodoList","deleteTodoListBegin","deleteTodoListById","deleteTodoListAllIds","renameTodoList","selectTodoList","reorderTodoList","setTodoListsById","setTodoListsAllIds","getAllTodoListsBegin","getAllTodoListsSuccess","todoListSelector","todoListsSelector","allIds","listsAllIdsSelector","selectedTodoListIdSelector","selectedListId","todoListsReducer","todoListIndexToDelete","todoTasksActions","push","noTasks","length","_action$payload3","newTodoTasks","allTodoListsReducer","_","selectedListReducer","mapDispatchToProps","deleteTodoList","todoListsActions","connect","todoListsSelectors","todoTasksSelectors","todo_tasks","alert","renameTodoListParams","trim","task","uuidv4","isComplete","resetForm","renameTodoTaskParams","TodoTasksDetails","width","height","backgroundColor","TodoLists","addListInputFocused","setAddListInputFocused","expandListsDrawer","setExpandListsDrawer","selectedTodoListId","addListFormSubmit","onListItemClick","isSelectedTodoListItem","todoListName","todo_lists_todo_lists","TodoTasksPage","todo_lists_container","todo_tasks_container","todo_tasks_details","AppHeader","react_router_dom","exact","to","fitIndexToListLength","listLength","newIndex","newSelectedItemAfterDelete","listIndex","selectedIndex","convertTodoListToOption","label","defaultTodoScheduleGroupNames","handleTodoTaskScheduleDragEnd","addTodoTaskToSchedule","deleteTodoTaskFromSchedule","reorderTodoTaskInSchedule","selectDate","todoScheduleTaskIdByIndexSelector","todoScheduleGroupName","todoSchedulesByDate","todoSchedulesById","todoScheduleTasksSelector","todoScheduleTasks","selectedDateSelector","selectedDate","todoSchedulesByDateReducer","todoTaskIndex","dateStr","normalizedTodoScheduleEntity","todoScheduleId","date","makeDefaultTodoScheduleGroup","todoTaskIndexToDelete","todoScheduleDate","todoTaskIdsToDelete","selectedDateReducer","Date","TodoScheduleSidebar","selectedTodoListOption","todoListOptions","expandSidebar","setExpandSidebar","selectedListOption","setSelectedListOption","react_select_browser_esm","newValue","options","formatDateToYYYYMMDD","getFullYear","getMonth","toString","padStart","getDate","formatDatePretty","getDateFromDayOffset","dayOffset","todo_schedule_sidebar","TodoSchedule","todoSchedulesActions","todoSchedulesSelectors","todo_schedule","TodoSchedulePage","srcKey","srcIndex","destKey","destIndex","onItemDragEndSchedule","todo_schedule_sidebar_container","todo_schedule_container","todo_schedule_page","library","faListUl","faPlus","faBars","faEllipsisH","faTrash","faEdit","faPalette","faCircle","faCheckCircle","faPencilAlt","faCalendarAlt","faStickyNote","faChevronLeft","faChevronRight","faTimes","getAllTodoLists","basename","process","app_header","react_router","path","component","Boolean","window","location","hostname","match","TodoListsClient","baseUrl","http","classCallCheck","this","jsonParseReviver","undefined","createClass","_this","url_","replace","fetch","method","headers","Accept","then","_response","processGetTodoLists","response","_this2","status","_headers","v","k","text","_responseText","result200","resultData200","JSON","parse","constructor","Array","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","item","TodoListDto","fromJS","err","return","throwException","Promise","resolve","_this3","options_","body","stringify","Content-Type","processPostTodoList","_this4","id","_this5","Error","encodeURIComponent","processGetTodoList","_this6","_this7","processPutTodoList","contentDisposition","get","fileNameMatch","exec","fileName","blob","data","_this8","processDeleteTodoList","property","hasOwnProperty","init","SwaggerException","_Error","message","_this18","possibleConstructorReturn","getPrototypeOf","call","isSwaggerException","inherits","obj","wrapNativeSuper","mapArrayObjToReduxEntity","arrayObj","sortedIds","sort","b","bObj","getSortedIdsFromArrayObj","reduce","convertArrayObjToDictObj","handleGetAllTodoListsRemote","watchAllTodoListsSagas","regenerator_default","wrap","_context3","prev","put","stop","_marked2","todoListIds","todoListIdToDelete","todoTasksToDelete","_context6","sent","indexOf","_marked4","newTodoLists","todoListsEntity","_context7","_marked5","getAllTodoListsRemote","todoListsObj","_context9","_ref3","asyncToGenerator","mark","_callee3","client","todoListEntities","_context8","getTodoLists","abrupt","apply","arguments","t0","console","log","_marked6","_context10","fork","_marked7","_ref4","_context11","_marked8","_context12","all","takeEvery","takeLatest","takeLeading","_marked9","watchAllTodoTasksSagas","todoTaskToDelete","todoTaskIds","_context","todo_tasks_sagas_marked","todoTasksEntity","_context2","todo_tasks_sagas_marked2","todo_tasks_sagas_marked3","watchAllTodoSchedulesSagas","todoScheduleSidebarDroppableId","selectedDateStr","selectedTodoTasks","_selectedTodoListId","newTodoTask","_todoTaskId","t1","todo_schedules_sagas_marked","todo_schedules_sagas_marked2","rootSaga","entitiesReducer","rootReducer","todoListsSagas","todoTasksSagas","todoSchedulesSagas","ducks_marked","sagaMiddleware","createSagaMiddleware","initialState","createOffline","offlineConfig","persist","offlineMiddleware","middleware","offlineEnhanceReducer","enhanceReducer","offlineEnhanceStore","enhanceStore","selectedDateTransformer","createTransform","inboundState","outboundState","rootState","draftRootState","dateSet","today","yesterday","tomorrow","makeDateSetFromToday","keys","whitelist","persistConfig","storage","transforms","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","run","configureStore","ReactDOM","render","es","integration_react","loading","app","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6fdc8535.chunk.js","sourcesContent":["import { DropResult } from 'react-beautiful-dnd';\r\nimport { HandleTodoTaskScheduleDragEndParams } from '../redux/ducks/todo-schedules/todo-schedules-types';\r\n\r\n// Types\r\ntype ReorderList<T> = (lists: T[]) => void;\r\ntype HandleTodoTaskScheduleDragEnd = (handleTodoTaskScheduleDragEndParams: HandleTodoTaskScheduleDragEndParams) => void;\r\n\r\nexport function reorder<T>(list: T[], startIndex: number, endIndex: number): T[] {\r\n    const result = [...list];\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n}\r\n\r\nexport function onItemDragEndReorderList<T>(result: DropResult, lists: T[], reorderList: ReorderList<T>): void {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination || source.index === destination.index) {\r\n        return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n        const newLists = reorder(lists, source.index, destination.index);\r\n        reorderList(newLists);\r\n    }\r\n}\r\n\r\nexport function onItemDragEndSchedule<T>(\r\n    result: DropResult,\r\n    handleTodoTaskScheduleDragEnd: HandleTodoTaskScheduleDragEnd,\r\n): void {\r\n    const { source, destination } = result;\r\n\r\n    if (!destination || (source.droppableId === destination.droppableId && source.index === destination.index)) {\r\n        return;\r\n    }\r\n\r\n    handleTodoTaskScheduleDragEnd({\r\n        srcKey: source.droppableId,\r\n        srcIndex: source.index,\r\n        destKey: destination.droppableId,\r\n        destIndex: destination.index,\r\n    });\r\n}\r\n","import React, { ReactElement, useEffect, useRef, useState } from 'react';\r\nimport { TodoTasksProps } from './todo-tasks-types';\r\nimport Menu, { MenuItem, Divider } from 'rc-menu';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport AutosizeInput from 'react-input-autosize';\r\nimport {\r\n    DragDropContext,\r\n    Draggable,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    Droppable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n} from 'react-beautiful-dnd';\r\nimport { Field, Form, Formik } from 'formik';\r\nimport { TodoTask } from '../../redux/ducks/todo-tasks/todo-tasks-types';\r\nimport { onItemDragEndReorderList } from '../../utils/beautiful-dnd';\r\n\r\nconst TodoTasks: React.FC<TodoTasksProps> = props => {\r\n    // States\r\n    const [openTodoListMenu, setOpenTodoListMenu] = useState(false);\r\n    const [editableListName, setEditableListName] = useState(false);\r\n    const [newTodoListName, setNewTodoListName] = useState('');\r\n    const [addTaskInputFocused, setAddTaskInputFocused] = useState(false);\r\n\r\n    // Refs\r\n    const todoListMenuRef = useRef<HTMLDivElement>(null);\r\n    const todoListMenuButtonRef = useRef<HTMLButtonElement>(null);\r\n    let renameTodoListInputRef: HTMLInputElement | null;\r\n\r\n    const {\r\n        selectedTodoList,\r\n        todoTasks,\r\n        handleMenuClick,\r\n        renameTodoListInputSubmit,\r\n        addTodoTaskFormSubmit,\r\n        deleteTodoTask,\r\n        renameTodoTaskInputSubmit,\r\n        reorderTodoTask,\r\n    } = props;\r\n\r\n    const processHandleMenuClick = (info: { key: string }): void => {\r\n        setOpenTodoListMenu(false);\r\n        handleMenuClick(info);\r\n    };\r\n\r\n    const processRenameTodoListInputSubmit = (): void => {\r\n        setEditableListName(false);\r\n        if (selectedTodoList) renameTodoListInputSubmit({ todoListId: selectedTodoList.todoListId, newTodoListName });\r\n    };\r\n\r\n    const handleClickOutside = (event: MouseEvent): void => {\r\n        if (\r\n            todoListMenuRef.current &&\r\n            todoListMenuButtonRef.current &&\r\n            // Not clicking inside menu\r\n            !todoListMenuRef.current.contains(event.target as HTMLDivElement) &&\r\n            // Not clicking on the menu button\r\n            !todoListMenuButtonRef.current.contains(event.target as HTMLDivElement)\r\n        ) {\r\n            setOpenTodoListMenu(false);\r\n        }\r\n        if (\r\n            renameTodoListInputRef &&\r\n            // Not clicking on the input box\r\n            !renameTodoListInputRef.contains(event.target as HTMLDivElement)\r\n        )\r\n            setEditableListName(false);\r\n    };\r\n\r\n    const isSelectedTodoTaskItem = (todoTaskId: string): boolean => {\r\n        // eslint-disable-next-line\r\n        return todoTaskId !== todoTaskId; // intentionally always false\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (renameTodoListInputRef) renameTodoListInputRef.focus();\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    const renameTodoTaskPrompt = (todoTask: TodoTask): void => {\r\n        let newTodoTaskName = prompt('Rename task', todoTask.name);\r\n        if (newTodoTaskName) renameTodoTaskInputSubmit({ todoTaskId: todoTask.todoTaskId, newTodoTaskName });\r\n    };\r\n\r\n    const renderTodoTasksToolbar = (): ReactElement | null => {\r\n        if (selectedTodoList) {\r\n            if (editableListName) {\r\n                return (\r\n                    <AutosizeInput\r\n                        name=\"listName\"\r\n                        className=\"todo-tasks__header-input-container\"\r\n                        inputClassName=\"todo-tasks__header-input\"\r\n                        value={newTodoListName}\r\n                        placeholder=\"Name\"\r\n                        inputRef={node => (renameTodoListInputRef = node)}\r\n                        onChange={event => setNewTodoListName(event.target.value)}\r\n                        onKeyDown={event => {\r\n                            if (event.key === 'Enter') processRenameTodoListInputSubmit();\r\n                        }}\r\n                        onFocus={event => event.target.select()}\r\n                        onBlur={processRenameTodoListInputSubmit}\r\n                    />\r\n                );\r\n            } else {\r\n                return (\r\n                    <React.Fragment>\r\n                        <h2\r\n                            className=\"todo-tasks__header\"\r\n                            onClick={() => {\r\n                                setNewTodoListName(selectedTodoList.name);\r\n                                setEditableListName(true);\r\n                            }}\r\n                            style={{ color: '#5f69e4' }}\r\n                        >\r\n                            {selectedTodoList.name}\r\n                        </h2>\r\n                        <span>\r\n                            <button\r\n                                className=\"menu-button\"\r\n                                onClick={() => {\r\n                                    setOpenTodoListMenu(!openTodoListMenu);\r\n                                }}\r\n                                ref={todoListMenuButtonRef}\r\n                            >\r\n                                <FontAwesomeIcon icon=\"ellipsis-h\" style={{ color: '#5f69e4' }} />\r\n                            </button>\r\n                            <div className=\"menu-container\">\r\n                                {openTodoListMenu && (\r\n                                    <div ref={todoListMenuRef}>\r\n                                        <Menu className=\"menu\" onClick={processHandleMenuClick}>\r\n                                            <MenuItem key=\"rename\" disabled={true}>\r\n                                                <span className=\"menu-content\">\r\n                                                    <FontAwesomeIcon icon=\"edit\" className=\"menu-content__icon fa-fw\" />\r\n                                                    &nbsp; Rename list\r\n                                                </span>\r\n                                            </MenuItem>\r\n                                            <MenuItem key=\"change-color\" disabled={true}>\r\n                                                <span className=\"menu-content\">\r\n                                                    <FontAwesomeIcon\r\n                                                        icon=\"palette\"\r\n                                                        className=\"menu-content__icon fa-fw\"\r\n                                                    />\r\n                                                    &nbsp; Change color\r\n                                                </span>\r\n                                            </MenuItem>\r\n                                            <Divider />\r\n                                            <MenuItem key=\"delete\">\r\n                                                <span className=\"menu-content--danger\">\r\n                                                    <FontAwesomeIcon\r\n                                                        icon=\"trash\"\r\n                                                        className=\"menu-content__icon--danger fa-fw\"\r\n                                                    />\r\n                                                    &nbsp; Delete list\r\n                                                </span>\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </span>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    const renderTodoTasksBody = (): ReactElement | null => {\r\n        if (selectedTodoList) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"todo-tasks__toolbar\">{renderTodoTasksToolbar()}</div>\r\n                    <DragDropContext onDragEnd={result => onItemDragEndReorderList(result, todoTasks, reorderTodoTask)}>\r\n                        <Droppable droppableId=\"listsDroppable\">\r\n                            {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    className={\r\n                                        'todo-tasks__box-container' +\r\n                                        (snapshot.isDraggingOver ? ' todo-tasks__box-container--dragging-over' : '')\r\n                                    }\r\n                                >\r\n                                    <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {todoTasks.map((todoTask, index) => (\r\n                                            <Draggable\r\n                                                key={todoTask.todoTaskId}\r\n                                                draggableId={todoTask.todoTaskId}\r\n                                                index={index}\r\n                                            >\r\n                                                {(\r\n                                                    providedDraggable: DraggableProvided,\r\n                                                    snapshotDraggable: DraggableStateSnapshot,\r\n                                                ) => (\r\n                                                    <div\r\n                                                        className={\r\n                                                            'todo-tasks__box' +\r\n                                                            (isSelectedTodoTaskItem(todoTask.todoTaskId)\r\n                                                                ? ' todo-tasks__box--selected'\r\n                                                                : ' todo-tasks__box--hoverable') + // hover effect, but not on selected\r\n                                                            (snapshotDraggable.isDragging\r\n                                                                ? ' todo-tasks__box--dragging'\r\n                                                                : '')\r\n                                                        }\r\n                                                        ref={providedDraggable.innerRef}\r\n                                                        {...providedDraggable.draggableProps}\r\n                                                        {...providedDraggable.dragHandleProps}\r\n                                                        onClick={() => renameTodoTaskPrompt(todoTask)}\r\n                                                    >\r\n                                                        <span className=\"todo-tasks__box-content\">\r\n                                                            <span className=\"todo-tasks__box-content--left\">\r\n                                                                <span\r\n                                                                    className=\"todo-tasks__box-circle\"\r\n                                                                    onClick={event => {\r\n                                                                        event.stopPropagation();\r\n                                                                        deleteTodoTask(todoTask.todoTaskId);\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon\r\n                                                                        icon={['far', 'check-circle']}\r\n                                                                        className=\"todo-tasks__box-circle--checked fa-fw\"\r\n                                                                        style={{\r\n                                                                            color: '#5f69e4' /* Placeholder color */,\r\n                                                                        }}\r\n                                                                    />\r\n                                                                    <FontAwesomeIcon\r\n                                                                        icon={['far', 'circle']}\r\n                                                                        className=\"todo-tasks__box-circle--unchecked fa-fw\"\r\n                                                                        style={{\r\n                                                                            color: '#5f69e4' /* Placeholder color */,\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </span>\r\n                                                                &nbsp;&nbsp;{todoTask.name}\r\n                                                            </span>\r\n                                                        </span>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </DragDropContext>\r\n                    <div className=\"todo-tasks__box\">\r\n                        <Formik initialValues={{ todoTaskName: '' }} onSubmit={addTodoTaskFormSubmit}>\r\n                            {({ isSubmitting, submitForm }) => (\r\n                                <Form>\r\n                                    <span\r\n                                        className={`todo-tasks__box-input-content${\r\n                                            addTaskInputFocused ? ' todo-tasks__box-input-content--focused' : ''\r\n                                        } u-center-vertical`}\r\n                                    >\r\n                                        <FontAwesomeIcon icon=\"plus\" className=\"fa-fw\" />\r\n                                        &nbsp;&nbsp;\r\n                                        <Field\r\n                                            className=\"todo-tasks__box-input\"\r\n                                            type=\"text\"\r\n                                            name=\"todoTaskName\"\r\n                                            placeholder=\"Add a task\"\r\n                                            disabled={isSubmitting}\r\n                                            autoComplete=\"off\"\r\n                                            onFocus={() => setAddTaskInputFocused(true)}\r\n                                            onBlur={() => {\r\n                                                submitForm();\r\n                                                setAddTaskInputFocused(false);\r\n                                            }}\r\n                                        />\r\n                                    </span>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </div>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    return <div className=\"todo-tasks\">{renderTodoTasksBody()}</div>;\r\n};\r\n\r\nexport default TodoTasks;\r\n","import { createReducer, createStandardAction } from 'typesafe-actions';\r\nimport {\r\n    DeleteTodoTaskByIdParams,\r\n    DeleteTodoTaskInTodoListParams,\r\n    RenameTodoTaskParams,\r\n    SetTodoTasksInTodoListParams,\r\n    TodoTask,\r\n} from './todo-tasks-types';\r\nimport { combineReducers } from 'redux';\r\nimport { NormalizedEntities, RootState } from '../../types';\r\nimport produce from 'immer';\r\nimport { merge } from 'lodash';\r\n\r\nexport const constants = {\r\n    ADD: 'todo-tasks/ADD',\r\n    DELETE_BEGIN: 'todo-tasks/DELETE_BEGIN',\r\n    DELETE_BY_ID: 'todo-tasks/DELETE_BY_ID',\r\n    DELETE_IN_LIST: 'todo-tasks/DELETE_IN_LIST',\r\n    DELETE_MULTIPLE: 'todo-tasks/DELETE_MULTIPLE',\r\n    RENAME: 'todo-tasks/RENAME',\r\n    REORDER: 'todo-tasks/REORDER',\r\n    SET_BY_ID: 'todo-tasks/SET_BY_ID',\r\n    SET_IN_LIST: 'todo-tasks/SET_IN_LIST',\r\n};\r\n\r\nexport const actions = {\r\n    addTodoTask: createStandardAction(constants.ADD)<TodoTask>(),\r\n    deleteTodoTaskBegin: createStandardAction(constants.DELETE_BEGIN)<string>(),\r\n    deleteTodoTaskById: createStandardAction(constants.DELETE_BY_ID)<DeleteTodoTaskByIdParams>(),\r\n    deleteTodoTaskInTodoList: createStandardAction(constants.DELETE_IN_LIST)<DeleteTodoTaskInTodoListParams>(),\r\n    deleteTodoTasks: createStandardAction(constants.DELETE_MULTIPLE)<string[]>(),\r\n    renameTodoTask: createStandardAction(constants.RENAME)<RenameTodoTaskParams>(),\r\n    reorderTodoTask: createStandardAction(constants.REORDER)<TodoTask[]>(),\r\n    setTodoTasksById: createStandardAction(constants.SET_BY_ID)<NormalizedEntities<TodoTask>>(),\r\n    setTodoTasksInTodoList: createStandardAction(constants.SET_IN_LIST)<SetTodoTasksInTodoListParams>(),\r\n};\r\n\r\nexport const selectors = {\r\n    todoTaskSelector: (state: RootState, todoTaskId: string): TodoTask | null => {\r\n        return state.entities.todoTasks.byId[todoTaskId];\r\n    },\r\n    todoTasksSelector: (state: RootState, todoListId: string): TodoTask[] => {\r\n        const todoList = state.entities.todoLists.byId[todoListId];\r\n        if (todoList) return todoList.todoTasks.map(key => state.entities.todoTasks.byId[key]);\r\n        return [];\r\n    },\r\n    todoTasksNotInScheduleSelector: (state: RootState, todoListId: string, dateKey: string): TodoTask[] => {\r\n        const todoList = state.entities.todoLists.byId[todoListId];\r\n        if (todoList) {\r\n            // Get all the todoTaskIds in the schedule on the specified date\r\n            const todoTaskIdsInSchedule = new Set();\r\n            if (dateKey in state.entities.todoSchedules.byDate) {\r\n                Object.values(state.entities.todoSchedules.byDate[dateKey].byId).forEach(todoScheduleGroup => {\r\n                    todoScheduleGroup.todoTasks.forEach(todoTaskId => todoTaskIdsInSchedule.add(todoTaskId));\r\n                });\r\n            }\r\n            // Filter the tasks in the schedule out\r\n            return todoList.todoTasks\r\n                .filter(todoTaskId => !todoTaskIdsInSchedule.has(todoTaskId))\r\n                .map(key => state.entities.todoTasks.byId[key]);\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nconst todoTasksReducer = createReducer({} as NormalizedEntities<TodoTask>)\r\n    .handleAction(actions.addTodoTask, (state, action) => {\r\n        return produce(state, draftState => {\r\n            draftState[action.payload.todoTaskId] = action.payload;\r\n        });\r\n    })\r\n    .handleAction(actions.deleteTodoTaskById, (state, action) => {\r\n        const { todoTaskIdToDelete, newTodoTaskIds } = action.payload;\r\n        return produce(state, draftState => {\r\n            delete draftState[todoTaskIdToDelete];\r\n            newTodoTaskIds.forEach((todoTaskId, index) => {\r\n                if (todoTaskId in draftState) draftState[todoTaskId].orderKey = index;\r\n            });\r\n        });\r\n    })\r\n    .handleAction(actions.deleteTodoTasks, (state, action) => {\r\n        return produce(state, draftState => {\r\n            action.payload.forEach(todoTaskId => {\r\n                delete draftState[todoTaskId];\r\n            });\r\n        });\r\n    })\r\n    .handleAction(actions.renameTodoTask, (state, action) => {\r\n        return produce(state, draftState => {\r\n            const { todoTaskId, newTodoTaskName } = action.payload;\r\n            if (todoTaskId in draftState) draftState[todoTaskId] = { ...draftState[todoTaskId], name: newTodoTaskName };\r\n        });\r\n    })\r\n    .handleAction(actions.setTodoTasksById, (state, action) => {\r\n        return produce(state, draftState => {\r\n            return merge({}, draftState, action.payload);\r\n        });\r\n    });\r\n\r\nexport default combineReducers({\r\n    byId: todoTasksReducer,\r\n});\r\n","import reducer from './todo-tasks-duck';\r\n\r\nexport { actions as todoTasksActions } from './todo-tasks-duck';\r\nexport { selectors as todoTasksSelectors } from './todo-tasks-duck';\r\n\r\nexport default reducer;\r\n","import { createReducer, createStandardAction } from 'typesafe-actions';\r\nimport { combineReducers } from 'redux';\r\nimport { RenameTodoListParams, TodoList, TodoListEntity } from './todo-lists-types';\r\nimport produce from 'immer';\r\nimport { NormalizedEntities, NormalizedObjects, RootState } from '../../types';\r\nimport { merge } from 'lodash';\r\nimport { todoTasksActions } from '../todo-tasks';\r\n\r\nexport const constants = {\r\n    ADD: 'todo-lists/ADD',\r\n    DELETE_BEGIN: 'todo-lists/DELETE_BEGIN',\r\n    DELETE_BY_ID: 'todo-lists/DELETE_BY_ID',\r\n    DELETE_ALL_IDS: 'todo-lists/DELETE_ALL_IDS',\r\n    RENAME: 'todo-lists/RENAME',\r\n    SELECT: 'todo-lists/SELECT',\r\n    REORDER: 'todo-lists/REORDER',\r\n    SET_BY_ID: 'todo-lists/SET_BY_ID',\r\n    SET_ALL_IDS: 'todo-lists/SET_ALL_IDS',\r\n    GET_ALL_BEGIN: 'todo-lists/GET_ALL_BEGIN',\r\n    GET_ALL_SUCCESS: 'todo-lists/GET_ALL_SUCCESS',\r\n};\r\n\r\nexport const actions = {\r\n    addTodoList: createStandardAction(constants.ADD)<TodoList>(),\r\n    deleteTodoListBegin: createStandardAction(constants.DELETE_BEGIN)<string>(),\r\n    deleteTodoListById: createStandardAction(constants.DELETE_BY_ID)<number>(),\r\n    deleteTodoListAllIds: createStandardAction(constants.DELETE_ALL_IDS)<number>(),\r\n    renameTodoList: createStandardAction(constants.RENAME)<RenameTodoListParams>(),\r\n    selectTodoList: createStandardAction(constants.SELECT)<string>(),\r\n    reorderTodoList: createStandardAction(constants.REORDER)<TodoList[]>(),\r\n    setTodoListsById: createStandardAction(constants.SET_BY_ID)<NormalizedEntities<TodoList>>(),\r\n    setTodoListsAllIds: createStandardAction(constants.SET_ALL_IDS)<string[]>(),\r\n    getAllTodoListsBegin: createStandardAction(constants.GET_ALL_BEGIN)<null>(),\r\n    getAllTodoListsSuccess: createStandardAction(constants.GET_ALL_SUCCESS)<NormalizedObjects<TodoList>>(),\r\n};\r\n\r\nexport const selectors = {\r\n    todoListSelector: (state: RootState, todoListId: string): TodoList | null => {\r\n        return state.entities.todoLists.byId[todoListId];\r\n    },\r\n    todoListsSelector: (state: RootState): TodoList[] => {\r\n        return state.entities.todoLists.allIds.map(key => state.entities.todoLists.byId[key]);\r\n    },\r\n    listsAllIdsSelector: (state: RootState): string[] => {\r\n        return state.entities.todoLists.allIds;\r\n    },\r\n    selectedTodoListIdSelector: (state: RootState): string => state.entities.todoLists.selectedListId,\r\n};\r\n\r\nconst todoListsReducer = createReducer({} as NormalizedEntities<TodoListEntity>)\r\n    .handleAction(actions.addTodoList, (state, action) => {\r\n        return produce(state, draftState => {\r\n            draftState[action.payload.todoListId] = { ...action.payload, todoTasks: [] };\r\n        });\r\n    })\r\n    .handleAction(actions.deleteTodoListById, (state, action) => {\r\n        const todoListIndexToDelete = action.payload;\r\n        return produce(state, draftState => {\r\n            Object.values(draftState).forEach(todoList => {\r\n                if (todoList.orderKey === todoListIndexToDelete) {\r\n                    delete draftState[todoList.todoListId];\r\n                } else if (todoList.orderKey > todoListIndexToDelete) {\r\n                    todoList.orderKey -= 1;\r\n                }\r\n            });\r\n        });\r\n    })\r\n    .handleAction(actions.renameTodoList, (state, action) => {\r\n        return produce(state, draftState => {\r\n            const { todoListId, newTodoListName } = action.payload;\r\n            if (todoListId in draftState) draftState[todoListId] = { ...draftState[todoListId], name: newTodoListName };\r\n        });\r\n    })\r\n    .handleAction(actions.setTodoListsById, (state, action) => {\r\n        return produce(state, draftState => {\r\n            return merge({}, draftState, action.payload);\r\n        });\r\n    })\r\n    .handleAction(todoTasksActions.addTodoTask, (state, action) => {\r\n        return produce(state, draftState => {\r\n            draftState[action.payload.todoListId].todoTasks.push(action.payload.todoTaskId);\r\n            draftState[action.payload.todoListId].noTasks += 1;\r\n        });\r\n    })\r\n    .handleAction(todoTasksActions.deleteTodoTaskInTodoList, (state, action) => {\r\n        const { todoListId, newTodoTaskIds } = action.payload;\r\n        return produce(state, draftState => {\r\n            draftState[todoListId].todoTasks = newTodoTaskIds;\r\n            draftState[todoListId].noTasks = newTodoTaskIds.length;\r\n        });\r\n    })\r\n    .handleAction(todoTasksActions.setTodoTasksInTodoList, (state, action) => {\r\n        const { todoListId, newTodoTasks } = action.payload;\r\n        return produce(state, draftState => {\r\n            draftState[todoListId].todoTasks = newTodoTasks;\r\n        });\r\n    });\r\n\r\nconst allTodoListsReducer = createReducer([] as string[])\r\n    .handleAction(actions.addTodoList, (state, action) => {\r\n        return produce(state, draftState => {\r\n            draftState.push(action.payload.todoListId);\r\n        });\r\n    })\r\n    .handleAction(actions.deleteTodoListAllIds, (state, action) => {\r\n        return produce(state, draftState => {\r\n            draftState.splice(action.payload, 1);\r\n        });\r\n    })\r\n    .handleAction(actions.setTodoListsAllIds, (_, action) => action.payload);\r\n\r\nconst selectedListReducer = createReducer('').handleAction(actions.selectTodoList, (_, action) => action.payload);\r\n\r\nexport default combineReducers({\r\n    byId: todoListsReducer,\r\n    allIds: allTodoListsReducer,\r\n    selectedListId: selectedListReducer,\r\n});\r\n","import reducer from './todo-lists-duck';\r\n\r\nexport { actions as todoListsActions } from './todo-lists-duck';\r\nexport { selectors as todoListsSelectors } from './todo-lists-duck';\r\n\r\nexport default reducer;\r\n","import { RootState } from '../../redux/types';\r\nimport { connect } from 'react-redux';\r\nimport TodoTasks from './todo-tasks';\r\nimport { AddTodoTaskFormValues, TodoTasksContainerProps, TodoTasksContainerState } from './todo-tasks-types';\r\nimport { todoListsActions, todoListsSelectors } from '../../redux/ducks/todo-lists';\r\nimport React from 'react';\r\nimport { RenameTodoListParams } from '../../redux/ducks/todo-lists/todo-lists-types';\r\nimport { FormikActions } from 'formik';\r\nimport uuidv4 from 'uuid';\r\nimport { todoTasksActions, todoTasksSelectors } from '../../redux/ducks/todo-tasks';\r\nimport { RenameTodoTaskParams } from '../../redux/ducks/todo-tasks/todo-tasks-types';\r\n\r\nconst TodoTasksContainer: React.FC<TodoTasksContainerProps> = props => {\r\n    const {\r\n        selectedTodoList,\r\n        todoTasks,\r\n        deleteTodoList,\r\n        renameTodoList,\r\n        addTodoTask,\r\n        deleteTodoTask,\r\n        renameTodoTask,\r\n        reorderTodoTask,\r\n    } = props;\r\n\r\n    const handleMenuClick = (info: { key: string }): void => {\r\n        switch (info.key) {\r\n            case 'rename':\r\n                alert('Rename clicked');\r\n                break;\r\n            case 'change-color':\r\n                alert('Change color clicked');\r\n                break;\r\n            case 'delete':\r\n                if (selectedTodoList) deleteTodoList(selectedTodoList.todoListId);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const renameTodoListInputSubmit = (renameTodoListParams: RenameTodoListParams): void => {\r\n        if (renameTodoListParams.newTodoListName.trim().length > 0) renameTodoList(renameTodoListParams);\r\n    };\r\n\r\n    const renameTodoTaskInputSubmit = (renameTodoTaskParams: RenameTodoTaskParams): void => {\r\n        if (renameTodoTaskParams.newTodoTaskName.trim().length > 0) renameTodoTask(renameTodoTaskParams);\r\n    };\r\n\r\n    const addTodoTaskFormSubmit = (\r\n        values: AddTodoTaskFormValues,\r\n        actions: FormikActions<AddTodoTaskFormValues>,\r\n    ): void => {\r\n        if (selectedTodoList && values.todoTaskName.trim().length > 0) {\r\n            const task = {\r\n                todoTaskId: uuidv4(),\r\n                todoListId: selectedTodoList.todoListId,\r\n                name: values.todoTaskName.trim(),\r\n                orderKey: todoTasks.length,\r\n                isComplete: false,\r\n            };\r\n            addTodoTask(task);\r\n        }\r\n        actions.resetForm();\r\n    };\r\n\r\n    return (\r\n        <TodoTasks\r\n            selectedTodoList={selectedTodoList}\r\n            todoTasks={todoTasks}\r\n            handleMenuClick={handleMenuClick}\r\n            renameTodoListInputSubmit={renameTodoListInputSubmit}\r\n            addTodoTaskFormSubmit={addTodoTaskFormSubmit}\r\n            deleteTodoTask={deleteTodoTask}\r\n            renameTodoTaskInputSubmit={renameTodoTaskInputSubmit}\r\n            reorderTodoTask={reorderTodoTask}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): TodoTasksContainerState => ({\r\n    selectedTodoList: todoListsSelectors.todoListSelector(state, state.entities.todoLists.selectedListId),\r\n    todoTasks: todoTasksSelectors.todoTasksSelector(state, state.entities.todoLists.selectedListId),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    deleteTodoList: todoListsActions.deleteTodoListBegin,\r\n    renameTodoList: todoListsActions.renameTodoList,\r\n    addTodoTask: todoTasksActions.addTodoTask,\r\n    deleteTodoTask: todoTasksActions.deleteTodoTaskBegin,\r\n    renameTodoTask: todoTasksActions.renameTodoTask,\r\n    reorderTodoTask: todoTasksActions.reorderTodoTask,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(TodoTasksContainer);\r\n","import React from 'react';\r\n\r\nconst TodoTasksDetails: React.FC = () => {\r\n    return (\r\n        <div className=\"todo-tasks-details\">\r\n            <div style={{ width: '100%', height: '5rem', backgroundColor: 'black' }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoTasksDetails;\r\n","import React, { useState } from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport { TodoListsProps } from './todo-lists-types';\r\nimport {\r\n    DragDropContext,\r\n    Draggable,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    Droppable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n} from 'react-beautiful-dnd';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { onItemDragEndReorderList } from '../../utils/beautiful-dnd';\r\n\r\nconst TodoLists: React.FC<TodoListsProps> = props => {\r\n    const [addListInputFocused, setAddListInputFocused] = useState(false);\r\n    const [expandListsDrawer, setExpandListsDrawer] = useState(true);\r\n    const { todoLists, selectedTodoListId, addListFormSubmit, onListItemClick, reorderTodoList } = props;\r\n\r\n    const isSelectedTodoListItem = (todoListId: string): boolean => {\r\n        return selectedTodoListId === todoListId;\r\n    };\r\n\r\n    return (\r\n        <div className={'todo-lists' + (expandListsDrawer ? '' : ' todo-lists--minimized')}>\r\n            <div className=\"todo-lists__box u-margin-bottom-small\">\r\n                <span\r\n                    className=\"todo-lists__drawer-icon-container todo-lists__box--hoverable\"\r\n                    onClick={() => setExpandListsDrawer(!expandListsDrawer)}\r\n                >\r\n                    <FontAwesomeIcon icon=\"bars\" className=\"todo-lists__drawer-icon fa-fw\" />\r\n                </span>\r\n            </div>\r\n            <DragDropContext onDragEnd={result => onItemDragEndReorderList(result, todoLists, reorderTodoList)}>\r\n                <Droppable droppableId=\"listsDroppable\">\r\n                    {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                            className={\r\n                                'todo-lists__box-container' +\r\n                                (snapshot.isDraggingOver ? ' todo-lists__box-container--dragging-over' : '')\r\n                            }\r\n                        >\r\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {todoLists.map((list, index) => (\r\n                                    <Draggable key={list.todoListId} draggableId={list.todoListId} index={index}>\r\n                                        {(\r\n                                            providedDraggable: DraggableProvided,\r\n                                            snapshotDraggable: DraggableStateSnapshot,\r\n                                        ) => (\r\n                                            <div\r\n                                                className={\r\n                                                    'todo-lists__box' +\r\n                                                    (isSelectedTodoListItem(list.todoListId)\r\n                                                        ? ' todo-lists__box--selected'\r\n                                                        : ' todo-lists__box--hoverable') + // hover effect, but not on selected\r\n                                                    (snapshotDraggable.isDragging ? ' todo-lists__box--dragging' : '')\r\n                                                }\r\n                                                ref={providedDraggable.innerRef}\r\n                                                {...providedDraggable.draggableProps}\r\n                                                {...providedDraggable.dragHandleProps}\r\n                                                onClick={() => onListItemClick(list.todoListId)}\r\n                                            >\r\n                                                <span\r\n                                                    className=\"todo-lists__box-content\"\r\n                                                    style={\r\n                                                        isSelectedTodoListItem(list.todoListId)\r\n                                                            ? { color: '#5f69e4' /* Placeholder color */ }\r\n                                                            : {}\r\n                                                    }\r\n                                                >\r\n                                                    <span className=\"todo-lists__box-content--left\">\r\n                                                        <FontAwesomeIcon\r\n                                                            icon=\"list-ul\"\r\n                                                            className=\"fa-fw\"\r\n                                                            style={{ color: '#5f69e4' /* Placeholder color */ }}\r\n                                                        />\r\n                                                        &nbsp;&nbsp;{expandListsDrawer && list.name}\r\n                                                    </span>\r\n                                                    {expandListsDrawer && list.noTasks}\r\n                                                </span>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div\r\n                className=\"todo-lists__box todo-lists__box--white todo-lists__box--hoverable\"\r\n                onClick={() => setExpandListsDrawer(true)}\r\n            >\r\n                <Formik initialValues={{ todoListName: '' }} onSubmit={addListFormSubmit}>\r\n                    {({ isSubmitting, submitForm }) => (\r\n                        <Form>\r\n                            <span\r\n                                className={`todo-lists__box-input-content${\r\n                                    addListInputFocused ? ' todo-lists__box-input-content--focused' : ''\r\n                                } u-center-vertical`}\r\n                            >\r\n                                <FontAwesomeIcon icon=\"plus\" className=\"fa-fw\" />\r\n                                &nbsp;&nbsp;\r\n                                <Field\r\n                                    className=\"todo-lists__box-input\"\r\n                                    type=\"text\"\r\n                                    name=\"todoListName\"\r\n                                    placeholder=\"Add a list\"\r\n                                    disabled={isSubmitting}\r\n                                    autoComplete=\"off\"\r\n                                    onFocus={() => setAddListInputFocused(true)}\r\n                                    onBlur={() => {\r\n                                        submitForm();\r\n                                        setAddListInputFocused(false);\r\n                                    }}\r\n                                />\r\n                            </span>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoLists;\r\n","import { RootState } from '../../redux/types';\r\nimport { todoListsActions, todoListsSelectors } from '../../redux/ducks/todo-lists';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport TodoLists from './todo-lists';\r\nimport { AddListFormValues, TodoListsContainerProps, TodoListsContainerState } from './todo-lists-types';\r\nimport { FormikActions } from 'formik';\r\nimport uuidv4 from 'uuid';\r\n\r\nconst TodoListsContainer: React.FC<TodoListsContainerProps> = props => {\r\n    const { todoLists, selectedTodoListId, addTodoList, selectTodoList, reorderTodoList } = props;\r\n\r\n    const addListFormSubmit = (values: AddListFormValues, actions: FormikActions<AddListFormValues>): void => {\r\n        if (values.todoListName.trim().length > 0) {\r\n            const todoList = {\r\n                todoListId: uuidv4(),\r\n                name: values.todoListName.trim(),\r\n                orderKey: todoLists.length,\r\n                noTasks: 0,\r\n            };\r\n            addTodoList(todoList);\r\n        }\r\n        actions.resetForm();\r\n    };\r\n\r\n    const onListItemClick = (todoListId: string): void => {\r\n        selectTodoList(todoListId);\r\n    };\r\n\r\n    return (\r\n        <TodoLists\r\n            todoLists={todoLists}\r\n            selectedTodoListId={selectedTodoListId}\r\n            addListFormSubmit={addListFormSubmit}\r\n            onListItemClick={onListItemClick}\r\n            reorderTodoList={reorderTodoList}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): TodoListsContainerState => ({\r\n    todoLists: todoListsSelectors.todoListsSelector(state),\r\n    selectedTodoListId: todoListsSelectors.selectedTodoListIdSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addTodoList: todoListsActions.addTodoList,\r\n    selectTodoList: todoListsActions.selectTodoList,\r\n    reorderTodoList: todoListsActions.reorderTodoList,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(TodoListsContainer);\r\n","import React from 'react';\r\nimport TodoTasks from '../../components/todo-tasks';\r\nimport TodoTasksDetails from '../../components/todo-tasks/details';\r\nimport TodoLists from '../../components/todo-lists';\r\n\r\nconst TodoTasksPage: React.FC = () => {\r\n    return (\r\n        <main>\r\n            <div className=\"todo-tasks-page\">\r\n                <TodoLists />\r\n                <TodoTasks />\r\n                <TodoTasksDetails />\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoTasksPage;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst AppHeader: React.FC = () => {\r\n    return (\r\n        <div className=\"app-header\">\r\n            <div className=\"app-header__navigation-bar\">\r\n                <ul>\r\n                    <li>\r\n                        <NavLink exact to=\"/\">\r\n                            <FontAwesomeIcon icon=\"pencil-alt\" className=\"fa-fw\" />\r\n                            &nbsp; To-do\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink to=\"/schedule\">\r\n                            <FontAwesomeIcon icon=\"calendar-alt\" className=\"fa-fw\" />\r\n                            &nbsp; Schedule\r\n                        </NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { TodoList } from '../redux/ducks/todo-lists/todo-lists-types';\r\nimport { Option } from './react-select';\r\nimport { NormalizedEntities, NormalizedObjects } from '../redux/types';\r\nimport { TodoScheduleEntity } from '../redux/ducks/todo-schedules/todo-schedules-types';\r\nimport uuidv4 from 'uuid';\r\n\r\nexport const fitIndexToListLength = (listLength: number, index: number): number => {\r\n    let newIndex = -1;\r\n    if (listLength > 0) {\r\n        if (index < listLength) newIndex = index;\r\n        else newIndex = listLength - 1;\r\n    }\r\n    return newIndex;\r\n};\r\n\r\nexport function newSelectedItemAfterDelete<T>(lists: T[], listIndex: number): T | null {\r\n    let selectedIndex = fitIndexToListLength(lists.length, listIndex);\r\n    if (selectedIndex >= 0) return lists[selectedIndex];\r\n    return null;\r\n}\r\n\r\nexport const convertTodoListToOption = (todoList: TodoList): Option<TodoList> => {\r\n    return { value: todoList, label: `${todoList.name}` };\r\n};\r\n\r\nexport const defaultTodoScheduleGroupNames = ['Morning', 'Afternoon', 'Evening', 'Night'];\r\n\r\nexport const makeDefaultTodoScheduleGroup = (dateStr: string): NormalizedObjects<TodoScheduleEntity> => {\r\n    const normalizedTodoScheduleEntity = {\r\n        byId: {} as NormalizedEntities<TodoScheduleEntity>,\r\n        allIds: defaultTodoScheduleGroupNames,\r\n    };\r\n    defaultTodoScheduleGroupNames.forEach(todoScheduleGroupName => {\r\n        normalizedTodoScheduleEntity.byId[todoScheduleGroupName] = {\r\n            todoScheduleId: uuidv4(),\r\n            name: todoScheduleGroupName,\r\n            date: dateStr,\r\n            todoTasks: [],\r\n        };\r\n    });\r\n    return normalizedTodoScheduleEntity;\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer, createStandardAction } from 'typesafe-actions';\r\nimport {\r\n    AddTodoTaskToScheduleParams,\r\n    DeleteTodoTaskFromScheduleParams,\r\n    HandleTodoTaskScheduleDragEndParams,\r\n    ReorderTodoTaskInScheduleParams,\r\n    TodoScheduleDate,\r\n} from './todo-schedules-types';\r\nimport produce from 'immer';\r\nimport { NormalizedEntities, RootState } from '../../types';\r\nimport { TodoTask } from '../todo-tasks/todo-tasks-types';\r\nimport { todoTasksActions } from '../todo-tasks';\r\nimport { makeDefaultTodoScheduleGroup } from '../../../utils/misc';\r\nimport { reorder } from '../../../utils/beautiful-dnd';\r\n\r\nexport const constants = {\r\n    HANDLE_DRAG_END: 'todo-schedules/HANDLE_DRAG_END',\r\n    ADD_TASK: 'todo-schedules/ADD_TASK',\r\n    DELETE_TASK: 'todo-schedules/DELETE_TASK',\r\n    REORDER_TASK: 'todo-schedules/REORDER_TASK',\r\n    SELECT_DATE: 'todo-schedules/SELECT_DATE',\r\n};\r\n\r\nexport const actions = {\r\n    handleTodoTaskScheduleDragEnd: createStandardAction(constants.HANDLE_DRAG_END)<\r\n        HandleTodoTaskScheduleDragEndParams\r\n    >(),\r\n    addTodoTaskToSchedule: createStandardAction(constants.ADD_TASK)<AddTodoTaskToScheduleParams>(),\r\n    deleteTodoTaskFromSchedule: createStandardAction(constants.DELETE_TASK)<DeleteTodoTaskFromScheduleParams>(),\r\n    reorderTodoTaskInSchedule: createStandardAction(constants.REORDER_TASK)<ReorderTodoTaskInScheduleParams>(),\r\n    selectDate: createStandardAction(constants.SELECT_DATE)<Date>(),\r\n};\r\n\r\nexport const selectors = {\r\n    todoScheduleTaskIdByIndexSelector: (\r\n        state: RootState,\r\n        dateKey: string,\r\n        todoScheduleGroupName: string,\r\n        index: number,\r\n    ): string | null => {\r\n        const todoSchedulesByDate = state.entities.todoSchedules.byDate;\r\n        if (dateKey in todoSchedulesByDate) {\r\n            const todoSchedulesById = todoSchedulesByDate[dateKey].byId;\r\n            if (todoScheduleGroupName in todoSchedulesById) {\r\n                return todoSchedulesById[todoScheduleGroupName].todoTasks[index];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n    todoScheduleTasksSelector: (state: RootState, dateKey: string): NormalizedEntities<TodoTask[]> => {\r\n        const todoSchedulesByDate = state.entities.todoSchedules.byDate;\r\n        if (dateKey in todoSchedulesByDate) {\r\n            const todoScheduleTasks = {} as NormalizedEntities<TodoTask[]>;\r\n            Object.values(todoSchedulesByDate[dateKey].byId).forEach(todoScheduleGroup => {\r\n                todoScheduleTasks[todoScheduleGroup.name] = todoScheduleGroup.todoTasks.map(\r\n                    key => state.entities.todoTasks.byId[key],\r\n                );\r\n            });\r\n            return todoScheduleTasks;\r\n        }\r\n        return {};\r\n    },\r\n    selectedDateSelector: (state: RootState): Date => state.entities.todoSchedules.selectedDate,\r\n};\r\n\r\nconst todoSchedulesByDateReducer = createReducer({} as TodoScheduleDate)\r\n    .handleAction(actions.addTodoTaskToSchedule, (state, action) => {\r\n        const { dateKey, todoScheduleGroupName, todoTaskId, todoTaskIndex } = action.payload;\r\n        return produce(state, draftState => {\r\n            if (!(dateKey in draftState)) {\r\n                draftState[dateKey] = makeDefaultTodoScheduleGroup(dateKey);\r\n            }\r\n            const todoSchedulesById = draftState[dateKey].byId;\r\n            if (todoScheduleGroupName in todoSchedulesById) {\r\n                const todoScheduleGroupTodoTasks = todoSchedulesById[todoScheduleGroupName].todoTasks;\r\n                todoScheduleGroupTodoTasks.splice(todoTaskIndex, 0, todoTaskId);\r\n            }\r\n            return draftState;\r\n        });\r\n    })\r\n    .handleAction(actions.deleteTodoTaskFromSchedule, (state, action) => {\r\n        const { dateKey, todoScheduleGroupName, todoTaskIndexToDelete } = action.payload;\r\n        return produce(state, draftState => {\r\n            if (dateKey in draftState) {\r\n                const todoSchedulesById = draftState[dateKey].byId;\r\n                if (todoScheduleGroupName in todoSchedulesById) {\r\n                    const todoScheduleGroupTodoTasks = todoSchedulesById[todoScheduleGroupName].todoTasks;\r\n                    todoScheduleGroupTodoTasks.splice(todoTaskIndexToDelete, 1);\r\n                }\r\n            }\r\n            return draftState;\r\n        });\r\n    })\r\n    .handleAction(actions.reorderTodoTaskInSchedule, (state, action) => {\r\n        const { dateKey, todoScheduleGroupName, startIndex, endIndex } = action.payload;\r\n        return produce(state, draftState => {\r\n            if (dateKey in draftState) {\r\n                const todoSchedulesById = draftState[dateKey].byId;\r\n                if (todoScheduleGroupName in todoSchedulesById) {\r\n                    const todoScheduleGroup = todoSchedulesById[todoScheduleGroupName];\r\n                    todoScheduleGroup.todoTasks = reorder(todoScheduleGroup.todoTasks, startIndex, endIndex);\r\n                }\r\n            }\r\n            return draftState;\r\n        });\r\n    })\r\n    .handleAction(todoTasksActions.deleteTodoTaskBegin, (state, action) => {\r\n        const todoTaskIdToDelete = action.payload;\r\n        return produce(state, draftState => {\r\n            Object.values(draftState).forEach(todoScheduleDate => {\r\n                Object.values(todoScheduleDate.byId).forEach(todoScheduleGroup => {\r\n                    todoScheduleGroup.todoTasks = todoScheduleGroup.todoTasks.filter(\r\n                        (todoTaskId: string) => todoTaskId !== todoTaskIdToDelete,\r\n                    );\r\n                });\r\n            });\r\n        });\r\n    })\r\n    .handleAction(todoTasksActions.deleteTodoTasks, (state, action) => {\r\n        const todoTaskIdsToDelete = new Set(action.payload);\r\n        return produce(state, draftState => {\r\n            Object.values(draftState).forEach(todoScheduleDate => {\r\n                Object.values(todoScheduleDate.byId).forEach(todoScheduleGroup => {\r\n                    todoScheduleGroup.todoTasks = todoScheduleGroup.todoTasks.filter(\r\n                        (todoTaskId: string) => !todoTaskIdsToDelete.has(todoTaskId),\r\n                    );\r\n                });\r\n            });\r\n        });\r\n    });\r\n\r\nconst selectedDateReducer = createReducer(new Date()).handleAction(actions.selectDate, (_, action) => action.payload);\r\n\r\nexport default combineReducers({\r\n    byDate: todoSchedulesByDateReducer,\r\n    selectedDate: selectedDateReducer,\r\n});\r\n","import reducer from './todo-schedules-duck';\r\n\r\nexport { actions as todoSchedulesActions } from './todo-schedules-duck';\r\nexport { selectors as todoSchedulesSelectors } from './todo-schedules-duck';\r\n\r\nexport default reducer;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { TodoScheduleSidebarProps } from './todo-schedule-sidebar-types';\r\nimport Select from 'react-select';\r\nimport {\r\n    Draggable,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    Droppable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n} from 'react-beautiful-dnd';\r\nimport { Option } from '../../../utils/react-select';\r\nimport { TodoList } from '../../../redux/ducks/todo-lists/todo-lists-types';\r\n\r\nconst TodoScheduleSidebar: React.FC<TodoScheduleSidebarProps> = props => {\r\n    const { selectedTodoListOption, todoListOptions, todoTasks, selectTodoList } = props;\r\n    const [expandSidebar, setExpandSidebar] = useState(true);\r\n    const [selectedListOption, setSelectedListOption] = useState(selectedTodoListOption);\r\n\r\n    const handleSelectedTodoListOptionChange = (newValue: any): void => {\r\n        if (newValue) {\r\n            const selectedTodoListOption = newValue as Option<TodoList>;\r\n            setSelectedListOption(selectedTodoListOption);\r\n            selectTodoList(selectedTodoListOption.value.todoListId);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // This is required to propagate the change when selectedTodoList is changed without using the select box\r\n        setSelectedListOption(selectedTodoListOption);\r\n    }, [selectedTodoListOption]);\r\n\r\n    return (\r\n        <div className={'todo-schedule-sidebar' + (expandSidebar ? '' : ' todo-schedule-sidebar--minimized')}>\r\n            <div className=\"todo-schedule-sidebar__box\">\r\n                <span\r\n                    className=\"todo-schedule-sidebar__drawer-icon-container todo-schedule-sidebar__box--hoverable\"\r\n                    onClick={() => setExpandSidebar(!expandSidebar)}\r\n                >\r\n                    <FontAwesomeIcon icon=\"bars\" className=\"todo-schedule-sidebar__drawer-icon fa-fw\" />\r\n                </span>\r\n            </div>\r\n            {expandSidebar && (\r\n                <Select\r\n                    className=\"todo-schedule-sidebar__select-container\"\r\n                    value={selectedListOption}\r\n                    onChange={handleSelectedTodoListOptionChange}\r\n                    options={todoListOptions}\r\n                    placeholder=\"Select a list\"\r\n                />\r\n            )}\r\n            <Droppable droppableId=\"tasks-sidebar-3%Grd8\">\r\n                {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        className={\r\n                            'todo-schedule-sidebar__box-container' +\r\n                            (snapshot.isDraggingOver ? ' todo-schedule-sidebar__box-container--dragging-over' : '')\r\n                        }\r\n                    >\r\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                            {todoTasks.map((todoTask, index) => (\r\n                                <Draggable key={todoTask.todoTaskId} draggableId={todoTask.todoTaskId} index={index}>\r\n                                    {(\r\n                                        providedDraggable: DraggableProvided,\r\n                                        snapshotDraggable: DraggableStateSnapshot,\r\n                                    ) => (\r\n                                        <div\r\n                                            className={\r\n                                                'todo-schedule-sidebar__box todo-schedule-sidebar__box--hoverable' +\r\n                                                (snapshotDraggable.isDragging\r\n                                                    ? ' todo-schedule-sidebar__box--dragging'\r\n                                                    : '')\r\n                                            }\r\n                                            ref={providedDraggable.innerRef}\r\n                                            {...providedDraggable.draggableProps}\r\n                                            {...providedDraggable.dragHandleProps}\r\n                                        >\r\n                                            <span className=\"todo-schedule-sidebar__box-content\">\r\n                                                <span className=\"todo-schedule-sidebar__box-content--left\">\r\n                                                    <FontAwesomeIcon\r\n                                                        icon={['far', 'sticky-note']}\r\n                                                        className=\"fa-fw\"\r\n                                                        style={{ color: '#ff8800' /* Placeholder color */ }}\r\n                                                    />\r\n                                                    &nbsp;&nbsp;{todoTask.name}\r\n                                                </span>\r\n                                            </span>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoScheduleSidebar;\r\n","export const formatDateToYYYYMMDD = (date: Date): string => {\r\n    return (\r\n        date.getFullYear() +\r\n        '-' +\r\n        (date.getMonth() + 1).toString().padStart(2, '0') +\r\n        '-' +\r\n        date\r\n            .getDate()\r\n            .toString()\r\n            .padStart(2, '0')\r\n    );\r\n};\r\n\r\nexport const formatDatePretty = (date: Date): string => {\r\n    const monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December',\r\n    ];\r\n    return `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\r\n};\r\n\r\n// dayOffset: negative = days before date, positive = days after date\r\nexport const getDateFromDayOffset = (date: Date, dayOffset: number): Date => {\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate() + dayOffset);\r\n};\r\n\r\nexport const makeDateSetFromToday = (): Set<string> => {\r\n    const today = new Date();\r\n    const yesterday = getDateFromDayOffset(today, -1);\r\n    const tomorrow = getDateFromDayOffset(today, 1);\r\n    return new Set([formatDateToYYYYMMDD(today), formatDateToYYYYMMDD(yesterday), formatDateToYYYYMMDD(tomorrow)]);\r\n};\r\n","import React from 'react';\r\nimport TodoScheduleSidebar from './todo-schedule-sidebar';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../../redux/types';\r\nimport { todoListsActions, todoListsSelectors } from '../../../redux/ducks/todo-lists';\r\nimport { TodoScheduleSidebarContainerProps, TodoScheduleSidebarContainerState } from './todo-schedule-sidebar-types';\r\nimport { todoTasksSelectors } from '../../../redux/ducks/todo-tasks';\r\nimport { convertTodoListToOption } from '../../../utils/misc';\r\nimport { formatDateToYYYYMMDD } from '../../../utils/date';\r\n\r\nconst TodoScheduleSidebarContainer: React.FC<TodoScheduleSidebarContainerProps> = props => {\r\n    const { selectedTodoList, todoLists, todoTasks, selectTodoList } = props;\r\n    const selectedTodoListOption = selectedTodoList ? convertTodoListToOption(selectedTodoList) : null;\r\n    const todoListOptions = todoLists.map(todoList => convertTodoListToOption(todoList));\r\n\r\n    return (\r\n        <TodoScheduleSidebar\r\n            selectedTodoListOption={selectedTodoListOption}\r\n            todoListOptions={todoListOptions}\r\n            todoTasks={todoTasks}\r\n            selectTodoList={selectTodoList}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): TodoScheduleSidebarContainerState => ({\r\n    selectedTodoList: todoListsSelectors.todoListSelector(state, state.entities.todoLists.selectedListId),\r\n    todoLists: todoListsSelectors.todoListsSelector(state),\r\n    todoTasks: todoTasksSelectors.todoTasksNotInScheduleSelector(\r\n        state,\r\n        state.entities.todoLists.selectedListId,\r\n        formatDateToYYYYMMDD(state.entities.todoSchedules.selectedDate),\r\n    ),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectTodoList: todoListsActions.selectTodoList,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(TodoScheduleSidebarContainer);\r\n","import React from 'react';\r\nimport {\r\n    Draggable,\r\n    DraggableProvided,\r\n    DraggableStateSnapshot,\r\n    Droppable,\r\n    DroppableProvided,\r\n    DroppableStateSnapshot,\r\n} from 'react-beautiful-dnd';\r\nimport { formatDatePretty, formatDateToYYYYMMDD, getDateFromDayOffset } from '../../utils/date';\r\nimport { TodoScheduleProps } from './todo-schedule-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { defaultTodoScheduleGroupNames } from '../../utils/misc';\r\n\r\nconst TodoSchedule: React.FC<TodoScheduleProps> = props => {\r\n    const { todoScheduleTasks, selectedDate, selectDate, deleteTodoTaskFromSchedule, deleteTodoTask } = props;\r\n\r\n    return (\r\n        <div className=\"todo-schedule\">\r\n            <div className=\"todo-schedule__calendar-header\">\r\n                <button\r\n                    className=\"todo-schedule__date-button\"\r\n                    onClick={() => selectDate(getDateFromDayOffset(selectedDate, -1))}\r\n                    disabled={selectedDate <= getDateFromDayOffset(new Date(), -1)}\r\n                >\r\n                    <FontAwesomeIcon icon=\"chevron-left\" className=\"fa-fw\" />\r\n                    &nbsp; {formatDatePretty(getDateFromDayOffset(selectedDate, -1))}\r\n                </button>\r\n                <h2>{formatDatePretty(selectedDate)}</h2>\r\n                <button\r\n                    className=\"todo-schedule__date-button\"\r\n                    onClick={() => selectDate(getDateFromDayOffset(selectedDate, 1))}\r\n                    disabled={selectedDate >= getDateFromDayOffset(new Date(), 1)}\r\n                >\r\n                    {formatDatePretty(getDateFromDayOffset(selectedDate, 1))} &nbsp;\r\n                    <FontAwesomeIcon icon=\"chevron-right\" className=\"fa-fw\" />\r\n                </button>\r\n            </div>\r\n            <div className=\"todo-schedule__calendar-container\">\r\n                {defaultTodoScheduleGroupNames.map(todoScheduleGroupName => (\r\n                    <React.Fragment key={todoScheduleGroupName}>\r\n                        <div className=\"todo-schedule__calender-label-container\">{todoScheduleGroupName}</div>\r\n                        <Droppable droppableId={todoScheduleGroupName}>\r\n                            {(provided: DroppableProvided, snapshot: DroppableStateSnapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    className={\r\n                                        'todo-schedule__calender-tasks-container' +\r\n                                        (snapshot.isDraggingOver ? ' todo-schedule__box-container--dragging-over' : '')\r\n                                    }\r\n                                >\r\n                                    <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                                        {todoScheduleGroupName in todoScheduleTasks &&\r\n                                            todoScheduleTasks[todoScheduleGroupName].map((todoTask, index) => (\r\n                                                <Draggable\r\n                                                    key={todoTask.todoTaskId}\r\n                                                    draggableId={todoTask.todoTaskId}\r\n                                                    index={index}\r\n                                                >\r\n                                                    {(\r\n                                                        providedDraggable: DraggableProvided,\r\n                                                        snapshotDraggable: DraggableStateSnapshot,\r\n                                                    ) => (\r\n                                                        <div\r\n                                                            className={\r\n                                                                'todo-schedule__box todo-schedule__box--hoverable' +\r\n                                                                (snapshotDraggable.isDragging\r\n                                                                    ? ' todo-schedule__box--dragging'\r\n                                                                    : '')\r\n                                                            }\r\n                                                            ref={providedDraggable.innerRef}\r\n                                                            {...providedDraggable.draggableProps}\r\n                                                            {...providedDraggable.dragHandleProps}\r\n                                                        >\r\n                                                            <span className=\"todo-schedule__box-content\">\r\n                                                                <span\r\n                                                                    className=\"todo-schedule__box-circle\"\r\n                                                                    onClick={event => {\r\n                                                                        event.stopPropagation();\r\n                                                                        deleteTodoTask(todoTask.todoTaskId);\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon\r\n                                                                        icon={['far', 'check-circle']}\r\n                                                                        className=\"todo-schedule__box-circle--checked fa-fw\"\r\n                                                                    />\r\n                                                                    <FontAwesomeIcon\r\n                                                                        icon={['far', 'circle']}\r\n                                                                        className=\"todo-schedule__box-circle--unchecked fa-fw\"\r\n                                                                    />\r\n                                                                </span>\r\n                                                                &nbsp;&nbsp;{todoTask.name}&nbsp;&nbsp;\r\n                                                                <span\r\n                                                                    onClick={event => {\r\n                                                                        event.stopPropagation();\r\n                                                                        deleteTodoTaskFromSchedule({\r\n                                                                            dateKey: formatDateToYYYYMMDD(selectedDate),\r\n                                                                            todoScheduleGroupName: todoScheduleGroupName,\r\n                                                                            todoTaskIndexToDelete: index,\r\n                                                                        });\r\n                                                                    }}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon\r\n                                                                        icon=\"times\"\r\n                                                                        className=\"todo-schedule__box-times fa-fw\"\r\n                                                                    />\r\n                                                                </span>\r\n                                                            </span>\r\n                                                        </div>\r\n                                                    )}\r\n                                                </Draggable>\r\n                                            ))}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </React.Fragment>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoSchedule;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TodoSchedule from './todo-schedule';\r\nimport { RootState } from '../../redux/types';\r\nimport { TodoScheduleContainerProps, TodoScheduleContainerState } from './todo-schedule-types';\r\nimport { todoSchedulesActions, todoSchedulesSelectors } from '../../redux/ducks/todo-schedules';\r\nimport { todoTasksActions } from '../../redux/ducks/todo-tasks';\r\nimport { formatDateToYYYYMMDD } from '../../utils/date';\r\n\r\nconst TodoScheduleContainer: React.FC<TodoScheduleContainerProps> = props => {\r\n    const { todoScheduleTasks, selectedDate, selectDate, deleteTodoTaskFromSchedule, deleteTodoTask } = props;\r\n\r\n    return (\r\n        <TodoSchedule\r\n            todoScheduleTasks={todoScheduleTasks}\r\n            selectedDate={selectedDate}\r\n            selectDate={selectDate}\r\n            deleteTodoTaskFromSchedule={deleteTodoTaskFromSchedule}\r\n            deleteTodoTask={deleteTodoTask}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): TodoScheduleContainerState => ({\r\n    todoScheduleTasks: todoSchedulesSelectors.todoScheduleTasksSelector(\r\n        state,\r\n        formatDateToYYYYMMDD(state.entities.todoSchedules.selectedDate),\r\n    ),\r\n    selectedDate: todoSchedulesSelectors.selectedDateSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectDate: todoSchedulesActions.selectDate,\r\n    deleteTodoTaskFromSchedule: todoSchedulesActions.deleteTodoTaskFromSchedule,\r\n    deleteTodoTask: todoTasksActions.deleteTodoTaskBegin,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(TodoScheduleContainer);\r\n","import React from 'react';\r\nimport TodoScheduleSidebar from '../../components/todo-schedule/sidebar';\r\nimport TodoSchedule from '../../components/todo-schedule';\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { onItemDragEndSchedule } from '../../utils/beautiful-dnd';\r\nimport { TodoSchedulePageProps } from './todo-schedule-page-types';\r\n\r\nconst TodoSchedulePage: React.FC<TodoSchedulePageProps> = props => {\r\n    const { handleTodoTaskScheduleDragEnd } = props;\r\n\r\n    return (\r\n        <main>\r\n            <div className=\"todo-schedule-page\">\r\n                <DragDropContext\r\n                    onDragEnd={result => {\r\n                        onItemDragEndSchedule(result, handleTodoTaskScheduleDragEnd);\r\n                    }}\r\n                >\r\n                    <TodoScheduleSidebar />\r\n                    <TodoSchedule />\r\n                </DragDropContext>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoSchedulePage;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { todoSchedulesActions } from '../../redux/ducks/todo-schedules';\r\nimport { TodoSchedulePageContainerProps } from './todo-schedule-page-types';\r\nimport TodoSchedulePage from './todo-schedule-page';\r\n\r\nconst TodoSchedulePageContainer: React.FC<TodoSchedulePageContainerProps> = props => {\r\n    const { handleTodoTaskScheduleDragEnd } = props;\r\n\r\n    return <TodoSchedulePage handleTodoTaskScheduleDragEnd={handleTodoTaskScheduleDragEnd} />;\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    handleTodoTaskScheduleDragEnd: todoSchedulesActions.handleTodoTaskScheduleDragEnd,\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps,\r\n)(TodoSchedulePageContainer);\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport TodoTasksPage from '../../routes/todo-tasks-page';\r\nimport { connect } from 'react-redux';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n    faBars,\r\n    faCalendarAlt,\r\n    faChevronLeft,\r\n    faChevronRight,\r\n    faEdit,\r\n    faEllipsisH,\r\n    faListUl,\r\n    faPalette,\r\n    faPencilAlt,\r\n    faPlus,\r\n    faTimes,\r\n    faTrash,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { faCheckCircle, faCircle, faStickyNote } from '@fortawesome/free-regular-svg-icons';\r\nimport { AppProps } from './app-types';\r\nimport { todoListsActions } from '../../redux/ducks/todo-lists';\r\nimport AppHeader from './header';\r\nimport TodoSchedulePage from '../../routes/todo-schedule-page';\r\n\r\nlibrary.add(\r\n    faListUl,\r\n    faPlus,\r\n    faBars,\r\n    faEllipsisH,\r\n    faTrash,\r\n    faEdit,\r\n    faPalette,\r\n    faCircle,\r\n    faCheckCircle,\r\n    faPencilAlt,\r\n    faCalendarAlt,\r\n    faStickyNote,\r\n    faChevronLeft,\r\n    faChevronRight,\r\n    faTimes,\r\n);\r\n\r\nconst App: React.FC<AppProps> = () => {\r\n    //const { getAllTodoLists } = props;\r\n\r\n    useEffect(() => {\r\n        //getAllTodoLists(null);\r\n    });\r\n\r\n    return (\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <AppHeader />\r\n            <Route exact path=\"/\" component={TodoTasksPage} />\r\n            <Route exact path=\"/schedule\" component={TodoSchedulePage} />\r\n        </Router>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    getAllTodoLists: todoListsActions.getAllTodoListsBegin,\r\n};\r\n\r\nexport default connect(\r\n    null,\r\n    mapDispatchToProps,\r\n)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/* tslint:disable */\n/* eslint-disable */\n//----------------------\n// <auto-generated>\n//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)\n// </auto-generated>\n//----------------------\n// ReSharper disable InconsistentNaming\n\nexport class TodoListsClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl ? baseUrl : \"https://localhost:44310\";\n    }\n\n    getTodoLists(): Promise<TodoListDto[] | null> {\n        let url_ = this.baseUrl + \"/api/TodoLists\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processGetTodoLists(_response);\n        });\n    }\n\n    protected processGetTodoLists(response: Response): Promise<TodoListDto[] | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (resultData200 && resultData200.constructor === Array) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(TodoListDto.fromJS(item));\n            }\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoListDto[] | null>(<any>null);\n    }\n\n    postTodoList(todoList: TodoList): Promise<TodoListDto | null> {\n        let url_ = this.baseUrl + \"/api/TodoLists\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(todoList);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\", \n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processPostTodoList(_response);\n        });\n    }\n\n    protected processPostTodoList(response: Response): Promise<TodoListDto | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 ? TodoListDto.fromJS(resultData200) : <any>null;\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoListDto | null>(<any>null);\n    }\n\n    getTodoList(id: string): Promise<TodoListDto | null> {\n        let url_ = this.baseUrl + \"/api/TodoLists/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processGetTodoList(_response);\n        });\n    }\n\n    protected processGetTodoList(response: Response): Promise<TodoListDto | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 ? TodoListDto.fromJS(resultData200) : <any>null;\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoListDto | null>(<any>null);\n    }\n\n    putTodoList(id: string, todoList: TodoList): Promise<FileResponse> {\n        let url_ = this.baseUrl + \"/api/TodoLists/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(todoList);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\", \n                \"Accept\": \"application/octet-stream\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processPutTodoList(_response);\n        });\n    }\n\n    protected processPutTodoList(response: Response): Promise<FileResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200 || status === 206) {\n            const contentDisposition = response.headers ? response.headers.get(\"content-disposition\") : undefined;\n            const fileNameMatch = contentDisposition ? /filename=\"?([^\"]*?)\"?(;|$)/g.exec(contentDisposition) : undefined;\n            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;\n            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<FileResponse>(<any>null);\n    }\n\n    deleteTodoList(id: string): Promise<FileResponse> {\n        let url_ = this.baseUrl + \"/api/TodoLists/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"DELETE\",\n            headers: {\n                \"Accept\": \"application/octet-stream\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processDeleteTodoList(_response);\n        });\n    }\n\n    protected processDeleteTodoList(response: Response): Promise<FileResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200 || status === 206) {\n            const contentDisposition = response.headers ? response.headers.get(\"content-disposition\") : undefined;\n            const fileNameMatch = contentDisposition ? /filename=\"?([^\"]*?)\"?(;|$)/g.exec(contentDisposition) : undefined;\n            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;\n            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<FileResponse>(<any>null);\n    }\n}\n\nexport class TodoTasksClient {\n    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };\n    private baseUrl: string;\n    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {\n        this.http = http ? http : <any>window;\n        this.baseUrl = baseUrl ? baseUrl : \"https://localhost:44310\";\n    }\n\n    getTodoTasks(): Promise<TodoTask[] | null> {\n        let url_ = this.baseUrl + \"/api/TodoTasks\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processGetTodoTasks(_response);\n        });\n    }\n\n    protected processGetTodoTasks(response: Response): Promise<TodoTask[] | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            if (resultData200 && resultData200.constructor === Array) {\n                result200 = [] as any;\n                for (let item of resultData200)\n                    result200!.push(TodoTask.fromJS(item));\n            }\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoTask[] | null>(<any>null);\n    }\n\n    postTodoTask(todoTask: TodoTask): Promise<TodoTask | null> {\n        let url_ = this.baseUrl + \"/api/TodoTasks\";\n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(todoTask);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\", \n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processPostTodoTask(_response);\n        });\n    }\n\n    protected processPostTodoTask(response: Response): Promise<TodoTask | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 ? TodoTask.fromJS(resultData200) : <any>null;\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoTask | null>(<any>null);\n    }\n\n    getTodoTask(id: string): Promise<TodoTask | null> {\n        let url_ = this.baseUrl + \"/api/TodoTasks/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processGetTodoTask(_response);\n        });\n    }\n\n    protected processGetTodoTask(response: Response): Promise<TodoTask | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 ? TodoTask.fromJS(resultData200) : <any>null;\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoTask | null>(<any>null);\n    }\n\n    putTodoTask(id: string, todoTask: TodoTask): Promise<FileResponse> {\n        let url_ = this.baseUrl + \"/api/TodoTasks/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        const content_ = JSON.stringify(todoTask);\n\n        let options_ = <RequestInit>{\n            body: content_,\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\", \n                \"Accept\": \"application/octet-stream\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processPutTodoTask(_response);\n        });\n    }\n\n    protected processPutTodoTask(response: Response): Promise<FileResponse> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200 || status === 206) {\n            const contentDisposition = response.headers ? response.headers.get(\"content-disposition\") : undefined;\n            const fileNameMatch = contentDisposition ? /filename=\"?([^\"]*?)\"?(;|$)/g.exec(contentDisposition) : undefined;\n            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;\n            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<FileResponse>(<any>null);\n    }\n\n    deleteTodoTask(id: string): Promise<TodoTask | null> {\n        let url_ = this.baseUrl + \"/api/TodoTasks/{id}\";\n        if (id === undefined || id === null)\n            throw new Error(\"The parameter 'id' must be defined.\");\n        url_ = url_.replace(\"{id}\", encodeURIComponent(\"\" + id)); \n        url_ = url_.replace(/[?&]$/, \"\");\n\n        let options_ = <RequestInit>{\n            method: \"DELETE\",\n            headers: {\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        return this.http.fetch(url_, options_).then((_response: Response) => {\n            return this.processDeleteTodoTask(_response);\n        });\n    }\n\n    protected processDeleteTodoTask(response: Response): Promise<TodoTask | null> {\n        const status = response.status;\n        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };\n        if (status === 200) {\n            return response.text().then((_responseText) => {\n            let result200: any = null;\n            let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n            result200 = resultData200 ? TodoTask.fromJS(resultData200) : <any>null;\n            return result200;\n            });\n        } else if (status !== 200 && status !== 204) {\n            return response.text().then((_responseText) => {\n            return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n            });\n        }\n        return Promise.resolve<TodoTask | null>(<any>null);\n    }\n}\n\nexport class TodoListDto implements ITodoListDto {\n    todoListId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    noTasks?: number;\n\n    constructor(data?: ITodoListDto) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.todoListId = data[\"todoListId\"];\n            this.name = data[\"name\"];\n            this.orderKey = data[\"orderKey\"];\n            this.noTasks = data[\"noTasks\"];\n        }\n    }\n\n    static fromJS(data: any): TodoListDto {\n        data = typeof data === 'object' ? data : {};\n        let result = new TodoListDto();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"todoListId\"] = this.todoListId;\n        data[\"name\"] = this.name;\n        data[\"orderKey\"] = this.orderKey;\n        data[\"noTasks\"] = this.noTasks;\n        return data; \n    }\n}\n\nexport interface ITodoListDto {\n    todoListId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    noTasks?: number;\n}\n\nexport class TodoList implements ITodoList {\n    todoListId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    noTasks?: number;\n    todoTasks?: TodoTask[] | undefined;\n\n    constructor(data?: ITodoList) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.todoListId = data[\"todoListId\"];\n            this.name = data[\"name\"];\n            this.orderKey = data[\"orderKey\"];\n            this.noTasks = data[\"noTasks\"];\n            if (data[\"todoTasks\"] && data[\"todoTasks\"].constructor === Array) {\n                this.todoTasks = [] as any;\n                for (let item of data[\"todoTasks\"])\n                    this.todoTasks!.push(TodoTask.fromJS(item));\n            }\n        }\n    }\n\n    static fromJS(data: any): TodoList {\n        data = typeof data === 'object' ? data : {};\n        let result = new TodoList();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"todoListId\"] = this.todoListId;\n        data[\"name\"] = this.name;\n        data[\"orderKey\"] = this.orderKey;\n        data[\"noTasks\"] = this.noTasks;\n        if (this.todoTasks && this.todoTasks.constructor === Array) {\n            data[\"todoTasks\"] = [];\n            for (let item of this.todoTasks)\n                data[\"todoTasks\"].push(item.toJSON());\n        }\n        return data; \n    }\n}\n\nexport interface ITodoList {\n    todoListId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    noTasks?: number;\n    todoTasks?: TodoTask[] | undefined;\n}\n\nexport class TodoTask implements ITodoTask {\n    todoTaskId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    isComplete?: boolean;\n    todoListId?: string;\n    todoList?: TodoList | undefined;\n\n    constructor(data?: ITodoTask) {\n        if (data) {\n            for (var property in data) {\n                if (data.hasOwnProperty(property))\n                    (<any>this)[property] = (<any>data)[property];\n            }\n        }\n    }\n\n    init(data?: any) {\n        if (data) {\n            this.todoTaskId = data[\"todoTaskId\"];\n            this.name = data[\"name\"];\n            this.orderKey = data[\"orderKey\"];\n            this.isComplete = data[\"isComplete\"];\n            this.todoListId = data[\"todoListId\"];\n            this.todoList = data[\"todoList\"] ? TodoList.fromJS(data[\"todoList\"]) : <any>undefined;\n        }\n    }\n\n    static fromJS(data: any): TodoTask {\n        data = typeof data === 'object' ? data : {};\n        let result = new TodoTask();\n        result.init(data);\n        return result;\n    }\n\n    toJSON(data?: any) {\n        data = typeof data === 'object' ? data : {};\n        data[\"todoTaskId\"] = this.todoTaskId;\n        data[\"name\"] = this.name;\n        data[\"orderKey\"] = this.orderKey;\n        data[\"isComplete\"] = this.isComplete;\n        data[\"todoListId\"] = this.todoListId;\n        data[\"todoList\"] = this.todoList ? this.todoList.toJSON() : <any>undefined;\n        return data; \n    }\n}\n\nexport interface ITodoTask {\n    todoTaskId?: string;\n    name?: string | undefined;\n    orderKey?: number;\n    isComplete?: boolean;\n    todoListId?: string;\n    todoList?: TodoList | undefined;\n}\n\nexport interface FileResponse {\n    data: Blob;\n    status: number;\n    fileName?: string;\n    headers?: { [name: string]: any };\n}\n\nexport class SwaggerException extends Error {\n    message: string;\n    status: number; \n    response: string; \n    headers: { [key: string]: any; };\n    result: any; \n\n    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\n        super();\n\n        this.message = message;\n        this.status = status;\n        this.response = response;\n        this.headers = headers;\n        this.result = result;\n    }\n\n    protected isSwaggerException = true;\n\n    static isSwaggerException(obj: any): obj is SwaggerException {\n        return obj.isSwaggerException === true;\n    }\n}\n\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {\n    if(result !== null && result !== undefined)\n        throw result;\n    else\n        throw new SwaggerException(message, status, response, headers, null);\n}","import { NormalizedEntities, NormalizedObjects } from '../redux/types';\r\n\r\nexport function convertArrayObjToDictObj<T>(arrayObj: T[], key: string): NormalizedEntities<T> {\r\n    return arrayObj.reduce(\r\n        (obj, item) => {\r\n            const objKey = ((item as unknown) as NormalizedEntities<string>)[key];\r\n            obj[objKey] = item;\r\n            return obj;\r\n        },\r\n        {} as NormalizedEntities<T>,\r\n    );\r\n}\r\n\r\nexport function getSortedIdsFromArrayObj<T>(arrayObj: T[], key: string): string[] {\r\n    return arrayObj\r\n        .sort((a, b) => {\r\n            const aObj = (a as unknown) as NormalizedEntities<string>;\r\n            const bObj = (b as unknown) as NormalizedEntities<string>;\r\n            // Let it break if property does not exist\r\n            return ((aObj.orderKey as unknown) as number) - ((bObj.orderKey as unknown) as number);\r\n        })\r\n        .map(item => {\r\n            return ((item as unknown) as NormalizedEntities<string>)[key];\r\n        });\r\n}\r\n\r\nexport function mapArrayObjToReduxEntity<T>(arrayObj: T[] | null, id: string): NormalizedObjects<T> | null {\r\n    if (arrayObj) {\r\n        const sortedIds = getSortedIdsFromArrayObj(arrayObj as T[], id);\r\n        const byId = convertArrayObjToDictObj(arrayObj as T[], id);\r\n        return {\r\n            byId: byId,\r\n            allIds: sortedIds as string[],\r\n        };\r\n    }\r\n    return null;\r\n}\r\n","import { put, all, takeEvery, select, takeLatest, fork, call, takeLeading } from 'redux-saga/effects';\r\nimport { actions, selectors } from './todo-lists-duck';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { TodoList, TodoListAction, TodoListEntity } from './todo-lists-types';\r\nimport { NormalizedObjects } from '../../types';\r\nimport { newSelectedItemAfterDelete } from '../../../utils/misc';\r\nimport { TodoListsClient, TodoList as TodoListClass, FileResponse } from '../../../api/config-autogen';\r\nimport { mapArrayObjToReduxEntity } from '../../../utils/api';\r\nimport { todoTasksActions } from '../todo-tasks';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction* handleAddTodoListRemote(todoList: TodoList): SagaIterator {\r\n    const addTodoListRemote = async (todoList: TodoList): Promise<TodoList | null> => {\r\n        const client = new TodoListsClient();\r\n        const result = await client.postTodoList(todoList as TodoListClass);\r\n        return result as TodoList | null;\r\n    };\r\n    try {\r\n        yield call(addTodoListRemote, todoList);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* addTodoList(action: TodoListAction): SagaIterator {\r\n    const todoList = action.payload as TodoList;\r\n    //yield fork(handleAddTodoListRemote, todoList);\r\n    yield put(actions.selectTodoList(todoList.todoListId));\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nfunction* handleDeleteTodoListRemote(todoListId: string): SagaIterator {\r\n    const deleteTodoListRemote = async (todoListId: string): Promise<FileResponse> => {\r\n        const client = new TodoListsClient();\r\n        const result = await client.deleteTodoList(todoListId);\r\n        return result as FileResponse;\r\n    };\r\n    try {\r\n        yield call(deleteTodoListRemote, todoListId);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* deleteTodoListBegin(action: TodoListAction): SagaIterator {\r\n    let todoListIds = yield select(selectors.listsAllIdsSelector);\r\n    // Find the index of the given list id\r\n    const todoListIdToDelete = action.payload as string;\r\n    const todoListIndexToDelete = todoListIds.indexOf(todoListIdToDelete);\r\n    // Delete, if the given list exists\r\n    if (todoListIndexToDelete >= 0) {\r\n        // First, delete the children tasks from Redux\r\n        const todoTasksToDelete = (yield select(selectors.todoListSelector, todoListIdToDelete)).todoTasks;\r\n        yield put(todoTasksActions.deleteTodoTasks(todoTasksToDelete));\r\n        // Now delete the list itself\r\n        //yield fork(handleDeleteTodoListRemote, todoListIdToDelete);\r\n        yield put(actions.deleteTodoListById(todoListIndexToDelete));\r\n        yield put(actions.deleteTodoListAllIds(todoListIndexToDelete));\r\n        // Adjust selected list, if it was deleted\r\n        let selectedTodoListId = yield select(selectors.selectedTodoListIdSelector);\r\n        if (selectedTodoListId === todoListIdToDelete) {\r\n            todoListIds = yield select(selectors.listsAllIdsSelector);\r\n            selectedTodoListId = newSelectedItemAfterDelete<string>(todoListIds, todoListIndexToDelete);\r\n            if (!selectedTodoListId) selectedTodoListId = '';\r\n            yield put(actions.selectTodoList(selectedTodoListId));\r\n        }\r\n    }\r\n}\r\n\r\nfunction* reorderTodoList(action: TodoListAction): SagaIterator {\r\n    const newTodoLists = (action.payload as TodoList[]).map((todoList: TodoList, index: number) => {\r\n        return { ...todoList, orderKey: index };\r\n    });\r\n    const todoListsEntity = mapArrayObjToReduxEntity(newTodoLists, 'todoListId');\r\n    if (todoListsEntity) {\r\n        yield put(actions.setTodoListsById(todoListsEntity.byId));\r\n        yield put(actions.setTodoListsAllIds(todoListsEntity.allIds));\r\n    }\r\n}\r\n\r\nfunction* handleGetAllTodoListsRemote(): SagaIterator {\r\n    const getAllTodoListsRemote = async (): Promise<NormalizedObjects<TodoListEntity> | null> => {\r\n        const client = new TodoListsClient();\r\n        const result = await client.getTodoLists();\r\n        if (result) {\r\n            const todoListEntities = result.map(item => {\r\n                return { ...item, todoTasks: [] };\r\n            });\r\n            return mapArrayObjToReduxEntity(todoListEntities as TodoListEntity[], 'todoListId');\r\n        }\r\n        return null;\r\n    };\r\n    try {\r\n        const todoListsObj = yield call(getAllTodoListsRemote);\r\n        if (todoListsObj) yield put(actions.getAllTodoListsSuccess(todoListsObj));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction* getAllTodoListsBegin(): SagaIterator {\r\n    yield fork(handleGetAllTodoListsRemote);\r\n}\r\n\r\nfunction* getAllTodoListsSuccess(action: TodoListAction): SagaIterator {\r\n    const { byId, allIds } = action.payload as NormalizedObjects<TodoList>;\r\n    yield put(actions.setTodoListsById(byId));\r\n    yield put(actions.setTodoListsAllIds(allIds));\r\n    if (allIds.length > 0) yield put(actions.selectTodoList(allIds[0]));\r\n}\r\n\r\nfunction* watchAllTodoListsSagas(): SagaIterator {\r\n    yield all([\r\n        takeEvery(actions.addTodoList, addTodoList),\r\n        takeEvery(actions.deleteTodoListBegin, deleteTodoListBegin),\r\n        takeLatest(actions.reorderTodoList, reorderTodoList),\r\n        takeLeading(actions.getAllTodoListsBegin, getAllTodoListsBegin),\r\n        takeEvery(actions.getAllTodoListsSuccess, getAllTodoListsSuccess),\r\n    ]);\r\n}\r\n\r\nexport default watchAllTodoListsSagas;\r\n","import { all, takeLatest, put, select, takeEvery } from 'redux-saga/effects';\r\nimport { SagaIterator } from 'redux-saga';\r\nimport { actions, selectors } from './todo-tasks-duck';\r\nimport { TodoTask, TodoTaskAction } from './todo-tasks-types';\r\nimport { mapArrayObjToReduxEntity } from '../../../utils/api';\r\nimport { todoListsSelectors } from '../todo-lists';\r\n\r\nfunction* deleteTodoTaskBegin(action: TodoTaskAction): SagaIterator {\r\n    // Make sure the given task id exists\r\n    const todoTaskIdToDelete = action.payload as string;\r\n    const todoTaskToDelete = yield select(selectors.todoTaskSelector, todoTaskIdToDelete);\r\n    if (todoTaskToDelete) {\r\n        // Find the index of the given task id\r\n        const todoTaskIds = (yield select(todoListsSelectors.todoListSelector, todoTaskToDelete.todoListId)).todoTasks;\r\n        if (todoTaskIds) {\r\n            // Should not need to check, unless bug (todoListId is incorrect)\r\n            const todoTaskIndexToDelete = todoTaskIds.indexOf(todoTaskIdToDelete);\r\n            if (todoTaskIndexToDelete >= 0) {\r\n                // Should not need to check, unless bug as the task exist in \"byId\"\r\n                /*\r\n                Delete the task by passing the newTodoTaskIds with the todoTaskIdToDelete removed\r\n                This is done because todoTasks.byId contain all tasks, not just tasks of one particular list\r\n                So we need to pass every affected ids to update (remove + update order key) properly\r\n                */\r\n                const newTodoTaskIds = todoTaskIds.filter(\r\n                    (_: string, index: number) => index !== todoTaskIndexToDelete,\r\n                );\r\n                yield put(actions.deleteTodoTaskById({ todoTaskIdToDelete, newTodoTaskIds }));\r\n                yield put(\r\n                    actions.deleteTodoTaskInTodoList({\r\n                        todoListId: todoTaskToDelete.todoListId,\r\n                        newTodoTaskIds,\r\n                    }),\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction* reorderTodoTask(action: TodoTaskAction): SagaIterator {\r\n    const newTodoTasks = (action.payload as TodoTask[]).map((todoTask: TodoTask, index: number) => {\r\n        return { ...todoTask, orderKey: index };\r\n    });\r\n    const todoTasksEntity = mapArrayObjToReduxEntity(newTodoTasks, 'todoTaskId');\r\n    if (todoTasksEntity) {\r\n        const todoListId = yield select(todoListsSelectors.selectedTodoListIdSelector);\r\n        yield put(actions.setTodoTasksById(todoTasksEntity.byId));\r\n        yield put(actions.setTodoTasksInTodoList({ todoListId, newTodoTasks: todoTasksEntity.allIds }));\r\n    }\r\n}\r\n\r\nfunction* watchAllTodoTasksSagas(): SagaIterator {\r\n    yield all([\r\n        takeEvery(actions.deleteTodoTaskBegin, deleteTodoTaskBegin),\r\n        takeLatest(actions.reorderTodoTask, reorderTodoTask),\r\n    ]);\r\n}\r\n\r\nexport default watchAllTodoTasksSagas;\r\n","import { SagaIterator } from 'redux-saga';\r\nimport { all, select, takeEvery, put } from 'redux-saga/effects';\r\nimport { HandleTodoTaskScheduleDragEndParams, TodoScheduleAction } from './todo-schedules-types';\r\nimport { actions, selectors } from './todo-schedules-duck';\r\nimport { formatDateToYYYYMMDD } from '../../../utils/date';\r\nimport { todoListsSelectors } from '../todo-lists';\r\nimport { todoTasksActions, todoTasksSelectors } from '../todo-tasks';\r\n\r\nfunction* handleTodoTaskScheduleDragEnd(action: TodoScheduleAction): SagaIterator {\r\n    const { srcKey, srcIndex, destKey, destIndex } = action.payload as HandleTodoTaskScheduleDragEndParams;\r\n    const todoScheduleSidebarDroppableId = 'tasks-sidebar-3%Grd8';\r\n    const selectedDateStr = formatDateToYYYYMMDD(yield select(selectors.selectedDateSelector));\r\n    // Guaranteed no null values\r\n    // Reorder tasks in a schedule group\r\n    if (srcKey === destKey) {\r\n        if (srcKey !== todoScheduleSidebarDroppableId) {\r\n            yield put(\r\n                actions.reorderTodoTaskInSchedule({\r\n                    dateKey: selectedDateStr,\r\n                    todoScheduleGroupName: srcKey,\r\n                    startIndex: srcIndex,\r\n                    endIndex: destIndex,\r\n                }),\r\n            );\r\n        } else {\r\n            // Handle reordering of the todoScheduleSidebar here\r\n        }\r\n    }\r\n    // Dragging from sidebar to a schedule group\r\n    else if (srcKey === todoScheduleSidebarDroppableId) {\r\n        const selectedTodoListId = yield select(todoListsSelectors.selectedTodoListIdSelector);\r\n        const selectedTodoTasks = yield select(\r\n            todoTasksSelectors.todoTasksNotInScheduleSelector,\r\n            selectedTodoListId,\r\n            selectedDateStr,\r\n        );\r\n        yield put(\r\n            actions.addTodoTaskToSchedule({\r\n                dateKey: selectedDateStr,\r\n                todoScheduleGroupName: destKey,\r\n                todoTaskId: selectedTodoTasks[srcIndex].todoTaskId,\r\n                todoTaskIndex: destIndex,\r\n            }),\r\n        );\r\n    }\r\n    // Dragging from schedule group to the sidebar\r\n    else if (destKey === todoScheduleSidebarDroppableId) {\r\n        const todoTaskId = yield select(selectors.todoScheduleTaskIdByIndexSelector, selectedDateStr, srcKey, srcIndex);\r\n        if (todoTaskId) {\r\n            const todoTask = yield select(todoTasksSelectors.todoTaskSelector, todoTaskId);\r\n            const selectedTodoListId = yield select(todoListsSelectors.selectedTodoListIdSelector);\r\n            // Delete the task from the original todoList, and place it in the new one\r\n            // Do this only if the currently selected list is actually different from todoTask.todoListId\r\n            if (todoTask && todoTask.todoListId !== selectedTodoListId) {\r\n                const todoList = yield select(todoListsSelectors.todoListSelector, todoTask.todoListId);\r\n                const selectedTodoList = yield select(todoListsSelectors.todoListSelector, selectedTodoListId);\r\n                if (todoList && selectedTodoList) {\r\n                    const newTodoTaskIds = todoList.todoTasks.filter(\r\n                        (todoTaskId: string) => todoTaskId !== todoTask.todoTaskId,\r\n                    );\r\n                    yield put(\r\n                        todoTasksActions.deleteTodoTaskInTodoList({ todoListId: todoTask.todoListId, newTodoTaskIds }),\r\n                    );\r\n                    // Now insert the task to the end of the new todoList\r\n                    // \"Clone\" the object just in case the value is a reference, to maintain immutability\r\n                    const newTodoTask = {\r\n                        ...todoTask,\r\n                        todoListId: selectedTodoListId,\r\n                        orderKey: selectedTodoList.todoTasks.length,\r\n                    };\r\n                    // addTodoTask currently behaves like setTodoTaskById, meaning if todoTaskId key already exist, it is simply replaced with the new object\r\n                    yield put(todoTasksActions.addTodoTask(newTodoTask));\r\n                }\r\n            }\r\n            // Now remove the task from the schedule\r\n            yield put(\r\n                actions.deleteTodoTaskFromSchedule({\r\n                    dateKey: selectedDateStr,\r\n                    todoScheduleGroupName: srcKey,\r\n                    todoTaskIndexToDelete: srcIndex,\r\n                }),\r\n            );\r\n        }\r\n    }\r\n    // Moving from one schedule group to another\r\n    else {\r\n        const todoTaskId = yield select(selectors.todoScheduleTaskIdByIndexSelector, selectedDateStr, srcKey, srcIndex);\r\n        if (todoTaskId) {\r\n            yield put(\r\n                actions.deleteTodoTaskFromSchedule({\r\n                    dateKey: selectedDateStr,\r\n                    todoScheduleGroupName: srcKey,\r\n                    todoTaskIndexToDelete: srcIndex,\r\n                }),\r\n            );\r\n            yield put(\r\n                actions.addTodoTaskToSchedule({\r\n                    dateKey: selectedDateStr,\r\n                    todoScheduleGroupName: destKey,\r\n                    todoTaskId: todoTaskId,\r\n                    todoTaskIndex: destIndex,\r\n                }),\r\n            );\r\n        }\r\n    }\r\n}\r\nfunction* watchAllTodoSchedulesSagas(): SagaIterator {\r\n    yield all([takeEvery(actions.handleTodoTaskScheduleDragEnd, handleTodoTaskScheduleDragEnd)]);\r\n}\r\n\r\nexport default watchAllTodoSchedulesSagas;\r\n","import { combineReducers } from 'redux';\r\nimport todoLists, { todoListsActions } from './todo-lists';\r\nimport todoTasks, { todoTasksActions } from './todo-tasks';\r\nimport todoSchedules, { todoSchedulesActions } from './todo-schedules';\r\nimport todoListsSagas from './todo-lists/todo-lists-sagas';\r\nimport todoTasksSagas from './todo-tasks/todo-tasks-sagas';\r\nimport todoSchedulesSagas from './todo-schedules/todo-schedules-sagas';\r\nimport { fork, all } from 'redux-saga/effects';\r\nimport { SagaIterator } from 'redux-saga';\r\n\r\nconst entitiesReducer = combineReducers({\r\n    todoLists,\r\n    todoTasks,\r\n    todoSchedules,\r\n});\r\n\r\nexport const rootReducer = combineReducers({\r\n    entities: entitiesReducer,\r\n});\r\n\r\nexport const rootAction = {\r\n    todoListsActions,\r\n    todoTasksActions,\r\n    todoSchedulesActions,\r\n};\r\n\r\nexport function* rootSaga(): SagaIterator {\r\n    yield all([fork(todoListsSagas), fork(todoTasksSagas), fork(todoSchedulesSagas)]);\r\n}\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { RootState } from './types';\r\nimport { rootReducer, rootSaga } from './ducks';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createOffline } from '@redux-offline/redux-offline';\r\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\r\nimport { persistStore, persistReducer, createTransform } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { makeDateSetFromToday } from '../utils/date';\r\nimport produce from 'immer';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst initialState: RootState = {\r\n    entities: {\r\n        todoLists: { byId: {}, allIds: [], selectedListId: '' },\r\n        todoTasks: { byId: {} },\r\n        todoSchedules: { byDate: {}, selectedDate: new Date() },\r\n    },\r\n};\r\n\r\nconst {\r\n    middleware: offlineMiddleware,\r\n    enhanceReducer: offlineEnhanceReducer,\r\n    enhanceStore: offlineEnhanceStore,\r\n} = createOffline({\r\n    ...offlineConfig,\r\n    persist: false as any,\r\n});\r\n\r\nconst selectedDateTransformer = createTransform(\r\n    // transform state on its way to being serialized and persisted.\r\n    (inboundState: any) => {\r\n        return inboundState;\r\n    },\r\n    // transform state being rehydrated\r\n    (outboundState: any) => {\r\n        let rootState: RootState = { entities: outboundState };\r\n        rootState = produce(rootState, draftRootState => {\r\n            const dateSet = makeDateSetFromToday(); // Set([Yesterday, Today, Tomorrow])\r\n            const todoSchedulesByDate = draftRootState.entities.todoSchedules.byDate;\r\n            // Clean up old date data\r\n            Object.keys(todoSchedulesByDate).forEach(date => {\r\n                if (!dateSet.has(date)) {\r\n                    delete todoSchedulesByDate[date];\r\n                }\r\n            });\r\n            // Reset the selected date to today's date\r\n            draftRootState.entities.todoSchedules.selectedDate = new Date();\r\n            return draftRootState;\r\n        });\r\n        return rootState.entities;\r\n    },\r\n    // define which reducers this transform gets called for.\r\n    { whitelist: ['entities'] },\r\n);\r\n\r\nconst persistConfig = {\r\n    key: 'ShirotonePlanner',\r\n    storage,\r\n    transforms: [selectedDateTransformer],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, offlineEnhanceReducer(rootReducer));\r\n\r\nexport default function configureStore(): any {\r\n    const store = createStore(\r\n        persistedReducer,\r\n        initialState as any,\r\n        composeWithDevTools(offlineEnhanceStore as any, applyMiddleware(sagaMiddleware, offlineMiddleware)),\r\n    );\r\n    const persistor = persistStore(store);\r\n\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return { persistor, store };\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/sass/main.scss';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nconst { persistor, store } = configureStore();\n\nReactDOM.render(\n    //<React.StrictMode>\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    //</React.StrictMode>\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}